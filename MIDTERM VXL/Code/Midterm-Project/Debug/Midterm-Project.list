
Midterm-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c6c  08002c6c  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002c6c  08002c6c  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c6c  08002c6c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c6c  08002c6c  00012c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c70  08002c70  00012c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000040  08002cb4  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002cb4  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094d9  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9a  00000000  00000000  00029542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fd3  00000000  00000000  0002c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7af  00000000  00000000  00043453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ef2  00000000  00000000  0004fc02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1af4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002820  00000000  00000000  000d1b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c34 	.word	0x08002c34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002c34 	.word	0x08002c34

0800014c <display7seg>:
 *  Created on: Nov 5, 2022
 *      Author: dangm
 */
#include "7segdisplay.h"
#include "main.h"
void display7seg(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7seg+0x310>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7seg+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	switch (num) {
	case 0:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b4      	ldr	r0, [pc, #720]	; (8000464 <display7seg+0x318>)
 8000192:	f001 fd3e 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b2      	ldr	r0, [pc, #712]	; (8000464 <display7seg+0x318>)
 800019c:	f001 fd39 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48af      	ldr	r0, [pc, #700]	; (8000464 <display7seg+0x318>)
 80001a6:	f001 fd34 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ad      	ldr	r0, [pc, #692]	; (8000464 <display7seg+0x318>)
 80001b0:	f001 fd2f 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48aa      	ldr	r0, [pc, #680]	; (8000464 <display7seg+0x318>)
 80001ba:	f001 fd2a 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a8      	ldr	r0, [pc, #672]	; (8000464 <display7seg+0x318>)
 80001c4:	f001 fd25 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	; 0x40
 80001cc:	48a5      	ldr	r0, [pc, #660]	; (8000464 <display7seg+0x318>)
 80001ce:	f001 fd20 	bl	8001c12 <HAL_GPIO_WritePin>
				break;
 80001d2:	e143      	b.n	800045c <display7seg+0x310>
			case 1:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a2      	ldr	r0, [pc, #648]	; (8000464 <display7seg+0x318>)
 80001da:	f001 fd1a 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a0      	ldr	r0, [pc, #640]	; (8000464 <display7seg+0x318>)
 80001e4:	f001 fd15 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489d      	ldr	r0, [pc, #628]	; (8000464 <display7seg+0x318>)
 80001ee:	f001 fd10 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489b      	ldr	r0, [pc, #620]	; (8000464 <display7seg+0x318>)
 80001f8:	f001 fd0b 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4898      	ldr	r0, [pc, #608]	; (8000464 <display7seg+0x318>)
 8000202:	f001 fd06 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4896      	ldr	r0, [pc, #600]	; (8000464 <display7seg+0x318>)
 800020c:	f001 fd01 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	; 0x40
 8000214:	4893      	ldr	r0, [pc, #588]	; (8000464 <display7seg+0x318>)
 8000216:	f001 fcfc 	bl	8001c12 <HAL_GPIO_WritePin>
				break;
 800021a:	e11f      	b.n	800045c <display7seg+0x310>
			case 2:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4890      	ldr	r0, [pc, #576]	; (8000464 <display7seg+0x318>)
 8000222:	f001 fcf6 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488e      	ldr	r0, [pc, #568]	; (8000464 <display7seg+0x318>)
 800022c:	f001 fcf1 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488b      	ldr	r0, [pc, #556]	; (8000464 <display7seg+0x318>)
 8000236:	f001 fcec 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4889      	ldr	r0, [pc, #548]	; (8000464 <display7seg+0x318>)
 8000240:	f001 fce7 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4886      	ldr	r0, [pc, #536]	; (8000464 <display7seg+0x318>)
 800024a:	f001 fce2 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4884      	ldr	r0, [pc, #528]	; (8000464 <display7seg+0x318>)
 8000254:	f001 fcdd 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4881      	ldr	r0, [pc, #516]	; (8000464 <display7seg+0x318>)
 800025e:	f001 fcd8 	bl	8001c12 <HAL_GPIO_WritePin>
				break;
 8000262:	e0fb      	b.n	800045c <display7seg+0x310>
			case 3:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487e      	ldr	r0, [pc, #504]	; (8000464 <display7seg+0x318>)
 800026a:	f001 fcd2 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487c      	ldr	r0, [pc, #496]	; (8000464 <display7seg+0x318>)
 8000274:	f001 fccd 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	4879      	ldr	r0, [pc, #484]	; (8000464 <display7seg+0x318>)
 800027e:	f001 fcc8 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4877      	ldr	r0, [pc, #476]	; (8000464 <display7seg+0x318>)
 8000288:	f001 fcc3 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4874      	ldr	r0, [pc, #464]	; (8000464 <display7seg+0x318>)
 8000292:	f001 fcbe 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4872      	ldr	r0, [pc, #456]	; (8000464 <display7seg+0x318>)
 800029c:	f001 fcb9 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	486f      	ldr	r0, [pc, #444]	; (8000464 <display7seg+0x318>)
 80002a6:	f001 fcb4 	bl	8001c12 <HAL_GPIO_WritePin>
				break;
 80002aa:	e0d7      	b.n	800045c <display7seg+0x310>
			case 4:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486c      	ldr	r0, [pc, #432]	; (8000464 <display7seg+0x318>)
 80002b2:	f001 fcae 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486a      	ldr	r0, [pc, #424]	; (8000464 <display7seg+0x318>)
 80002bc:	f001 fca9 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4867      	ldr	r0, [pc, #412]	; (8000464 <display7seg+0x318>)
 80002c6:	f001 fca4 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4865      	ldr	r0, [pc, #404]	; (8000464 <display7seg+0x318>)
 80002d0:	f001 fc9f 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4862      	ldr	r0, [pc, #392]	; (8000464 <display7seg+0x318>)
 80002da:	f001 fc9a 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4860      	ldr	r0, [pc, #384]	; (8000464 <display7seg+0x318>)
 80002e4:	f001 fc95 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	485d      	ldr	r0, [pc, #372]	; (8000464 <display7seg+0x318>)
 80002ee:	f001 fc90 	bl	8001c12 <HAL_GPIO_WritePin>
				break;
 80002f2:	e0b3      	b.n	800045c <display7seg+0x310>
			case 5:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485a      	ldr	r0, [pc, #360]	; (8000464 <display7seg+0x318>)
 80002fa:	f001 fc8a 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4858      	ldr	r0, [pc, #352]	; (8000464 <display7seg+0x318>)
 8000304:	f001 fc85 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4855      	ldr	r0, [pc, #340]	; (8000464 <display7seg+0x318>)
 800030e:	f001 fc80 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4853      	ldr	r0, [pc, #332]	; (8000464 <display7seg+0x318>)
 8000318:	f001 fc7b 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4850      	ldr	r0, [pc, #320]	; (8000464 <display7seg+0x318>)
 8000322:	f001 fc76 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484e      	ldr	r0, [pc, #312]	; (8000464 <display7seg+0x318>)
 800032c:	f001 fc71 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	484b      	ldr	r0, [pc, #300]	; (8000464 <display7seg+0x318>)
 8000336:	f001 fc6c 	bl	8001c12 <HAL_GPIO_WritePin>
				break;
 800033a:	e08f      	b.n	800045c <display7seg+0x310>
			case 6:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4848      	ldr	r0, [pc, #288]	; (8000464 <display7seg+0x318>)
 8000342:	f001 fc66 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4846      	ldr	r0, [pc, #280]	; (8000464 <display7seg+0x318>)
 800034c:	f001 fc61 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4843      	ldr	r0, [pc, #268]	; (8000464 <display7seg+0x318>)
 8000356:	f001 fc5c 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4841      	ldr	r0, [pc, #260]	; (8000464 <display7seg+0x318>)
 8000360:	f001 fc57 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483e      	ldr	r0, [pc, #248]	; (8000464 <display7seg+0x318>)
 800036a:	f001 fc52 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483c      	ldr	r0, [pc, #240]	; (8000464 <display7seg+0x318>)
 8000374:	f001 fc4d 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	4839      	ldr	r0, [pc, #228]	; (8000464 <display7seg+0x318>)
 800037e:	f001 fc48 	bl	8001c12 <HAL_GPIO_WritePin>
				break;
 8000382:	e06b      	b.n	800045c <display7seg+0x310>
			case 7:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4836      	ldr	r0, [pc, #216]	; (8000464 <display7seg+0x318>)
 800038a:	f001 fc42 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4834      	ldr	r0, [pc, #208]	; (8000464 <display7seg+0x318>)
 8000394:	f001 fc3d 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4831      	ldr	r0, [pc, #196]	; (8000464 <display7seg+0x318>)
 800039e:	f001 fc38 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	482f      	ldr	r0, [pc, #188]	; (8000464 <display7seg+0x318>)
 80003a8:	f001 fc33 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482c      	ldr	r0, [pc, #176]	; (8000464 <display7seg+0x318>)
 80003b2:	f001 fc2e 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482a      	ldr	r0, [pc, #168]	; (8000464 <display7seg+0x318>)
 80003bc:	f001 fc29 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4827      	ldr	r0, [pc, #156]	; (8000464 <display7seg+0x318>)
 80003c6:	f001 fc24 	bl	8001c12 <HAL_GPIO_WritePin>
				break;
 80003ca:	e047      	b.n	800045c <display7seg+0x310>
			case 8:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4824      	ldr	r0, [pc, #144]	; (8000464 <display7seg+0x318>)
 80003d2:	f001 fc1e 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4822      	ldr	r0, [pc, #136]	; (8000464 <display7seg+0x318>)
 80003dc:	f001 fc19 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <display7seg+0x318>)
 80003e6:	f001 fc14 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481d      	ldr	r0, [pc, #116]	; (8000464 <display7seg+0x318>)
 80003f0:	f001 fc0f 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481a      	ldr	r0, [pc, #104]	; (8000464 <display7seg+0x318>)
 80003fa:	f001 fc0a 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4818      	ldr	r0, [pc, #96]	; (8000464 <display7seg+0x318>)
 8000404:	f001 fc05 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <display7seg+0x318>)
 800040e:	f001 fc00 	bl	8001c12 <HAL_GPIO_WritePin>
				break;
 8000412:	e023      	b.n	800045c <display7seg+0x310>
			case 9:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4812      	ldr	r0, [pc, #72]	; (8000464 <display7seg+0x318>)
 800041a:	f001 fbfa 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4810      	ldr	r0, [pc, #64]	; (8000464 <display7seg+0x318>)
 8000424:	f001 fbf5 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <display7seg+0x318>)
 800042e:	f001 fbf0 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480b      	ldr	r0, [pc, #44]	; (8000464 <display7seg+0x318>)
 8000438:	f001 fbeb 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4808      	ldr	r0, [pc, #32]	; (8000464 <display7seg+0x318>)
 8000442:	f001 fbe6 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <display7seg+0x318>)
 800044c:	f001 fbe1 	bl	8001c12 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4803      	ldr	r0, [pc, #12]	; (8000464 <display7seg+0x318>)
 8000456:	f001 fbdc 	bl	8001c12 <HAL_GPIO_WritePin>
				break;
 800045a:	bf00      	nop
	}
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010c00 	.word	0x40010c00

08000468 <DebugLed>:
 *      Author: dangm
 */
#include "DebugLed.h"
#include "global.h"

void DebugLed(){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	switch(ledstatus){
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <DebugLed+0x80>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b0c      	cmp	r3, #12
 8000472:	d020      	beq.n	80004b6 <DebugLed+0x4e>
 8000474:	2b0c      	cmp	r3, #12
 8000476:	dc34      	bgt.n	80004e2 <DebugLed+0x7a>
 8000478:	2b0a      	cmp	r3, #10
 800047a:	d002      	beq.n	8000482 <DebugLed+0x1a>
 800047c:	2b0b      	cmp	r3, #11
 800047e:	d007      	beq.n	8000490 <DebugLed+0x28>
			ledstatus = LED_ON;
			setTimer1(100);
		}
		break;
	}
}
 8000480:	e02f      	b.n	80004e2 <DebugLed+0x7a>
		ledstatus = LED_ON;
 8000482:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <DebugLed+0x80>)
 8000484:	220b      	movs	r2, #11
 8000486:	601a      	str	r2, [r3, #0]
		setTimer1(100);
 8000488:	2064      	movs	r0, #100	; 0x64
 800048a:	f001 f845 	bl	8001518 <setTimer1>
		break;
 800048e:	e028      	b.n	80004e2 <DebugLed+0x7a>
		if(timer_flag1 ==1){
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <DebugLed+0x84>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d121      	bne.n	80004dc <DebugLed+0x74>
			timer_flag1 = 0;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <DebugLed+0x84>)
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2120      	movs	r1, #32
 80004a2:	4813      	ldr	r0, [pc, #76]	; (80004f0 <DebugLed+0x88>)
 80004a4:	f001 fbb5 	bl	8001c12 <HAL_GPIO_WritePin>
			ledstatus = LED_OFF;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <DebugLed+0x80>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 80004ae:	2064      	movs	r0, #100	; 0x64
 80004b0:	f001 f832 	bl	8001518 <setTimer1>
		break;
 80004b4:	e012      	b.n	80004dc <DebugLed+0x74>
		if(timer_flag1 ==1){
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <DebugLed+0x84>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d110      	bne.n	80004e0 <DebugLed+0x78>
			timer_flag1 = 0;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <DebugLed+0x84>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2120      	movs	r1, #32
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <DebugLed+0x88>)
 80004ca:	f001 fba2 	bl	8001c12 <HAL_GPIO_WritePin>
			ledstatus = LED_ON;
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <DebugLed+0x80>)
 80004d0:	220b      	movs	r2, #11
 80004d2:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 80004d4:	2064      	movs	r0, #100	; 0x64
 80004d6:	f001 f81f 	bl	8001518 <setTimer1>
		break;
 80004da:	e001      	b.n	80004e0 <DebugLed+0x78>
		break;
 80004dc:	bf00      	nop
 80004de:	e000      	b.n	80004e2 <DebugLed+0x7a>
		break;
 80004e0:	bf00      	nop
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000070 	.word	0x20000070
 80004ec:	20000084 	.word	0x20000084
 80004f0:	40010800 	.word	0x40010800

080004f4 <subKeyProcess>:
int KeyReg3 = NORMAL_STATE;
int KeyReg7 = NORMAL_STATE;
int KeyReg11 = NORMAL_STATE;
int TimerForKeyPress = 300;

void subKeyProcess(){
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	RESET_flag = 1;
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <subKeyProcess+0x14>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	601a      	str	r2, [r3, #0]
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000005c 	.word	0x2000005c

0800050c <subKeyProcess1>:
void subKeyProcess1(){
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	INC_flag = 1;
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <subKeyProcess1+0x14>)
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000060 	.word	0x20000060

08000524 <subKeyProcess2>:
void subKeyProcess2(){
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	DEC_flag = 1;
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <subKeyProcess2+0x14>)
 800052a:	2201      	movs	r2, #1
 800052c:	601a      	str	r2, [r3, #0]
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000064 	.word	0x20000064

0800053c <getKeyInput>:
void getKeyInput(){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <getKeyInput+0x84>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1f      	ldr	r2, [pc, #124]	; (80005c4 <getKeyInput+0x88>)
 8000546:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <getKeyInput+0x8c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a1c      	ldr	r2, [pc, #112]	; (80005c0 <getKeyInput+0x84>)
 800054e:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8000550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000554:	481d      	ldr	r0, [pc, #116]	; (80005cc <getKeyInput+0x90>)
 8000556:	f001 fb45 	bl	8001be4 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	461a      	mov	r2, r3
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <getKeyInput+0x8c>)
 8000560:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <getKeyInput+0x88>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <getKeyInput+0x84>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	429a      	cmp	r2, r3
 800056c:	d126      	bne.n	80005bc <getKeyInput+0x80>
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <getKeyInput+0x84>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <getKeyInput+0x8c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	429a      	cmp	r2, r3
 8000578:	d120      	bne.n	80005bc <getKeyInput+0x80>
		if(KeyReg3 != KeyReg2){
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <getKeyInput+0x94>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <getKeyInput+0x8c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	429a      	cmp	r2, r3
 8000584:	d00e      	beq.n	80005a4 <getKeyInput+0x68>
			KeyReg3 = KeyReg2;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <getKeyInput+0x8c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <getKeyInput+0x94>)
 800058c:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE){
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <getKeyInput+0x8c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d112      	bne.n	80005bc <getKeyInput+0x80>
				subKeyProcess();
 8000596:	f7ff ffad 	bl	80004f4 <subKeyProcess>
				TimerForKeyPress = 300;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <getKeyInput+0x98>)
 800059c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005a0:	601a      	str	r2, [r3, #0]
			if(TimerForKeyPress == 0){
				KeyReg3 = NORMAL_STATE;
			}
		}
	}
}
 80005a2:	e00b      	b.n	80005bc <getKeyInput+0x80>
			TimerForKeyPress--;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <getKeyInput+0x98>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <getKeyInput+0x98>)
 80005ac:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <getKeyInput+0x98>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d102      	bne.n	80005bc <getKeyInput+0x80>
				KeyReg3 = NORMAL_STATE;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <getKeyInput+0x94>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000008 	.word	0x20000008
 80005cc:	40011000 	.word	0x40011000
 80005d0:	20000024 	.word	0x20000024
 80005d4:	20000030 	.word	0x20000030

080005d8 <getKeyInput1>:
void getKeyInput1(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	KeyReg4 = KeyReg5;
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <getKeyInput1+0x84>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <getKeyInput1+0x88>)
 80005e2:	6013      	str	r3, [r2, #0]
	KeyReg5 = KeyReg6;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <getKeyInput1+0x8c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a1c      	ldr	r2, [pc, #112]	; (800065c <getKeyInput1+0x84>)
 80005ea:	6013      	str	r3, [r2, #0]
	KeyReg6 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	481d      	ldr	r0, [pc, #116]	; (8000668 <getKeyInput1+0x90>)
 80005f2:	f001 faf7 	bl	8001be4 <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <getKeyInput1+0x8c>)
 80005fc:	601a      	str	r2, [r3, #0]
		if((KeyReg4 == KeyReg5) && (KeyReg5 == KeyReg6)){
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <getKeyInput1+0x88>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <getKeyInput1+0x84>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	429a      	cmp	r2, r3
 8000608:	d126      	bne.n	8000658 <getKeyInput1+0x80>
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <getKeyInput1+0x84>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <getKeyInput1+0x8c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d120      	bne.n	8000658 <getKeyInput1+0x80>
			if(KeyReg7 != KeyReg6){
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <getKeyInput1+0x94>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <getKeyInput1+0x8c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	429a      	cmp	r2, r3
 8000620:	d00e      	beq.n	8000640 <getKeyInput1+0x68>
				KeyReg7 = KeyReg6;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <getKeyInput1+0x8c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a11      	ldr	r2, [pc, #68]	; (800066c <getKeyInput1+0x94>)
 8000628:	6013      	str	r3, [r2, #0]
				if(KeyReg6 == PRESSED_STATE){
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <getKeyInput1+0x8c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d112      	bne.n	8000658 <getKeyInput1+0x80>
					subKeyProcess1();
 8000632:	f7ff ff6b 	bl	800050c <subKeyProcess1>
					TimerForKeyPress = 300;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <getKeyInput1+0x98>)
 8000638:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800063c:	601a      	str	r2, [r3, #0]
				if(TimerForKeyPress == 0){
					KeyReg7 = NORMAL_STATE;
				}
			}
		}
}
 800063e:	e00b      	b.n	8000658 <getKeyInput1+0x80>
				TimerForKeyPress--;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <getKeyInput1+0x98>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3b01      	subs	r3, #1
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <getKeyInput1+0x98>)
 8000648:	6013      	str	r3, [r2, #0]
				if(TimerForKeyPress == 0){
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <getKeyInput1+0x98>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d102      	bne.n	8000658 <getKeyInput1+0x80>
					KeyReg7 = NORMAL_STATE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <getKeyInput1+0x94>)
 8000654:	2201      	movs	r2, #1
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000010 	.word	0x20000010
 8000660:	2000000c 	.word	0x2000000c
 8000664:	20000014 	.word	0x20000014
 8000668:	40011000 	.word	0x40011000
 800066c:	20000028 	.word	0x20000028
 8000670:	20000030 	.word	0x20000030

08000674 <getKeyInput2>:
void getKeyInput2(){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	KeyReg8 = KeyReg9;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <getKeyInput2+0x84>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <getKeyInput2+0x88>)
 800067e:	6013      	str	r3, [r2, #0]
	KeyReg9 = KeyReg10;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <getKeyInput2+0x8c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <getKeyInput2+0x84>)
 8000686:	6013      	str	r3, [r2, #0]
	KeyReg10 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 8000688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068c:	481d      	ldr	r0, [pc, #116]	; (8000704 <getKeyInput2+0x90>)
 800068e:	f001 faa9 	bl	8001be4 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <getKeyInput2+0x8c>)
 8000698:	601a      	str	r2, [r3, #0]
		if((KeyReg8 == KeyReg9) && (KeyReg9 == KeyReg10)){
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <getKeyInput2+0x88>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <getKeyInput2+0x84>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d126      	bne.n	80006f4 <getKeyInput2+0x80>
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <getKeyInput2+0x84>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <getKeyInput2+0x8c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d120      	bne.n	80006f4 <getKeyInput2+0x80>
			if(KeyReg11 != KeyReg10){
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <getKeyInput2+0x94>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <getKeyInput2+0x8c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d00e      	beq.n	80006dc <getKeyInput2+0x68>
				KeyReg11 = KeyReg10;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <getKeyInput2+0x8c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a11      	ldr	r2, [pc, #68]	; (8000708 <getKeyInput2+0x94>)
 80006c4:	6013      	str	r3, [r2, #0]
				if(KeyReg10 == PRESSED_STATE){
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <getKeyInput2+0x8c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d112      	bne.n	80006f4 <getKeyInput2+0x80>
					subKeyProcess2();
 80006ce:	f7ff ff29 	bl	8000524 <subKeyProcess2>
					TimerForKeyPress = 300;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <getKeyInput2+0x98>)
 80006d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006d8:	601a      	str	r2, [r3, #0]
				if(TimerForKeyPress == 0){
					KeyReg11 = NORMAL_STATE;
				}
			}
		}
}
 80006da:	e00b      	b.n	80006f4 <getKeyInput2+0x80>
				TimerForKeyPress--;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <getKeyInput2+0x98>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3b01      	subs	r3, #1
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <getKeyInput2+0x98>)
 80006e4:	6013      	str	r3, [r2, #0]
				if(TimerForKeyPress == 0){
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <getKeyInput2+0x98>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <getKeyInput2+0x80>
					KeyReg11 = NORMAL_STATE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <getKeyInput2+0x94>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000001c 	.word	0x2000001c
 80006fc:	20000018 	.word	0x20000018
 8000700:	20000020 	.word	0x20000020
 8000704:	40011000 	.word	0x40011000
 8000708:	2000002c 	.word	0x2000002c
 800070c:	20000030 	.word	0x20000030

08000710 <fsm_step1>:
 */
#include "fsm_step1.h"
#include "7segdisplay.h"
#include "global.h"

void fsm_step1(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	switch (status){
 8000714:	4b9d      	ldr	r3, [pc, #628]	; (800098c <fsm_step1+0x27c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b09      	cmp	r3, #9
 800071a:	f200 81ca 	bhi.w	8000ab2 <fsm_step1+0x3a2>
 800071e:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <fsm_step1+0x14>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	0800074d 	.word	0x0800074d
 8000728:	0800079f 	.word	0x0800079f
 800072c:	080007f1 	.word	0x080007f1
 8000730:	08000843 	.word	0x08000843
 8000734:	08000895 	.word	0x08000895
 8000738:	080008e7 	.word	0x080008e7
 800073c:	08000939 	.word	0x08000939
 8000740:	0800099d 	.word	0x0800099d
 8000744:	080009ed 	.word	0x080009ed
 8000748:	08000a3d 	.word	0x08000a3d
	case BUTT_0:
			display7seg(0);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff fcfd 	bl	800014c <display7seg>
			if(RESET_flag == 1){
 8000752:	4b8f      	ldr	r3, [pc, #572]	; (8000990 <fsm_step1+0x280>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d105      	bne.n	8000766 <fsm_step1+0x56>
				RESET_flag = 0;
 800075a:	4b8d      	ldr	r3, [pc, #564]	; (8000990 <fsm_step1+0x280>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 8000760:	4b8a      	ldr	r3, [pc, #552]	; (800098c <fsm_step1+0x27c>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
			}
			if(INC_flag == 1){
 8000766:	4b8b      	ldr	r3, [pc, #556]	; (8000994 <fsm_step1+0x284>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d108      	bne.n	8000780 <fsm_step1+0x70>
				INC_flag = 0;
 800076e:	4b89      	ldr	r3, [pc, #548]	; (8000994 <fsm_step1+0x284>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
				status = BUTT_1;
 8000774:	4b85      	ldr	r3, [pc, #532]	; (800098c <fsm_step1+0x27c>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
				setTimer(200);
 800077a:	20c8      	movs	r0, #200	; 0xc8
 800077c:	f000 feb8 	bl	80014f0 <setTimer>
			}
			if(DEC_flag == 1){
 8000780:	4b85      	ldr	r3, [pc, #532]	; (8000998 <fsm_step1+0x288>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	f040 8181 	bne.w	8000a8c <fsm_step1+0x37c>
				DEC_flag = 0;
 800078a:	4b83      	ldr	r3, [pc, #524]	; (8000998 <fsm_step1+0x288>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
				status = BUTT_9;
 8000790:	4b7e      	ldr	r3, [pc, #504]	; (800098c <fsm_step1+0x27c>)
 8000792:	2209      	movs	r2, #9
 8000794:	601a      	str	r2, [r3, #0]
				setTimer(200);
 8000796:	20c8      	movs	r0, #200	; 0xc8
 8000798:	f000 feaa 	bl	80014f0 <setTimer>
			}
			break;
 800079c:	e176      	b.n	8000a8c <fsm_step1+0x37c>
	case BUTT_1:
			display7seg(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fcd4 	bl	800014c <display7seg>
			if(RESET_flag == 1){
 80007a4:	4b7a      	ldr	r3, [pc, #488]	; (8000990 <fsm_step1+0x280>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d105      	bne.n	80007b8 <fsm_step1+0xa8>
				RESET_flag = 0;
 80007ac:	4b78      	ldr	r3, [pc, #480]	; (8000990 <fsm_step1+0x280>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 80007b2:	4b76      	ldr	r3, [pc, #472]	; (800098c <fsm_step1+0x27c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
			}
			if(INC_flag == 1){
 80007b8:	4b76      	ldr	r3, [pc, #472]	; (8000994 <fsm_step1+0x284>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d108      	bne.n	80007d2 <fsm_step1+0xc2>
				INC_flag = 0;
 80007c0:	4b74      	ldr	r3, [pc, #464]	; (8000994 <fsm_step1+0x284>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
				status = BUTT_2;
 80007c6:	4b71      	ldr	r3, [pc, #452]	; (800098c <fsm_step1+0x27c>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	601a      	str	r2, [r3, #0]
				setTimer(200);
 80007cc:	20c8      	movs	r0, #200	; 0xc8
 80007ce:	f000 fe8f 	bl	80014f0 <setTimer>
			}
			if(DEC_flag == 1){
 80007d2:	4b71      	ldr	r3, [pc, #452]	; (8000998 <fsm_step1+0x288>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	f040 815a 	bne.w	8000a90 <fsm_step1+0x380>
				DEC_flag = 0;
 80007dc:	4b6e      	ldr	r3, [pc, #440]	; (8000998 <fsm_step1+0x288>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 80007e2:	4b6a      	ldr	r3, [pc, #424]	; (800098c <fsm_step1+0x27c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
				setTimer(200);
 80007e8:	20c8      	movs	r0, #200	; 0xc8
 80007ea:	f000 fe81 	bl	80014f0 <setTimer>
			}
			break;
 80007ee:	e14f      	b.n	8000a90 <fsm_step1+0x380>
	case BUTT_2:
			display7seg(2);
 80007f0:	2002      	movs	r0, #2
 80007f2:	f7ff fcab 	bl	800014c <display7seg>
			if(RESET_flag == 1){
 80007f6:	4b66      	ldr	r3, [pc, #408]	; (8000990 <fsm_step1+0x280>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d105      	bne.n	800080a <fsm_step1+0xfa>
				RESET_flag = 0;
 80007fe:	4b64      	ldr	r3, [pc, #400]	; (8000990 <fsm_step1+0x280>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 8000804:	4b61      	ldr	r3, [pc, #388]	; (800098c <fsm_step1+0x27c>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
			}
			if(INC_flag == 1){
 800080a:	4b62      	ldr	r3, [pc, #392]	; (8000994 <fsm_step1+0x284>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d108      	bne.n	8000824 <fsm_step1+0x114>
				INC_flag = 0;
 8000812:	4b60      	ldr	r3, [pc, #384]	; (8000994 <fsm_step1+0x284>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
				status = BUTT_3;
 8000818:	4b5c      	ldr	r3, [pc, #368]	; (800098c <fsm_step1+0x27c>)
 800081a:	2203      	movs	r2, #3
 800081c:	601a      	str	r2, [r3, #0]
				setTimer(200);
 800081e:	20c8      	movs	r0, #200	; 0xc8
 8000820:	f000 fe66 	bl	80014f0 <setTimer>
			}
			if(DEC_flag == 1){
 8000824:	4b5c      	ldr	r3, [pc, #368]	; (8000998 <fsm_step1+0x288>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	f040 8133 	bne.w	8000a94 <fsm_step1+0x384>
				DEC_flag = 0;
 800082e:	4b5a      	ldr	r3, [pc, #360]	; (8000998 <fsm_step1+0x288>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
				status = BUTT_1;
 8000834:	4b55      	ldr	r3, [pc, #340]	; (800098c <fsm_step1+0x27c>)
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]
				setTimer(200);
 800083a:	20c8      	movs	r0, #200	; 0xc8
 800083c:	f000 fe58 	bl	80014f0 <setTimer>
			}
			break;
 8000840:	e128      	b.n	8000a94 <fsm_step1+0x384>
	case BUTT_3:
			display7seg(3);
 8000842:	2003      	movs	r0, #3
 8000844:	f7ff fc82 	bl	800014c <display7seg>
			if(RESET_flag == 1){
 8000848:	4b51      	ldr	r3, [pc, #324]	; (8000990 <fsm_step1+0x280>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d105      	bne.n	800085c <fsm_step1+0x14c>
				RESET_flag = 0;
 8000850:	4b4f      	ldr	r3, [pc, #316]	; (8000990 <fsm_step1+0x280>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 8000856:	4b4d      	ldr	r3, [pc, #308]	; (800098c <fsm_step1+0x27c>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
			}
			if(INC_flag == 1){
 800085c:	4b4d      	ldr	r3, [pc, #308]	; (8000994 <fsm_step1+0x284>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d108      	bne.n	8000876 <fsm_step1+0x166>
				INC_flag = 0;
 8000864:	4b4b      	ldr	r3, [pc, #300]	; (8000994 <fsm_step1+0x284>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
				status = BUTT_4;
 800086a:	4b48      	ldr	r3, [pc, #288]	; (800098c <fsm_step1+0x27c>)
 800086c:	2204      	movs	r2, #4
 800086e:	601a      	str	r2, [r3, #0]
				setTimer(200);
 8000870:	20c8      	movs	r0, #200	; 0xc8
 8000872:	f000 fe3d 	bl	80014f0 <setTimer>
			}
			if(DEC_flag == 1){
 8000876:	4b48      	ldr	r3, [pc, #288]	; (8000998 <fsm_step1+0x288>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b01      	cmp	r3, #1
 800087c:	f040 810c 	bne.w	8000a98 <fsm_step1+0x388>
				DEC_flag = 0;
 8000880:	4b45      	ldr	r3, [pc, #276]	; (8000998 <fsm_step1+0x288>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
				status = BUTT_2;
 8000886:	4b41      	ldr	r3, [pc, #260]	; (800098c <fsm_step1+0x27c>)
 8000888:	2202      	movs	r2, #2
 800088a:	601a      	str	r2, [r3, #0]
				setTimer(200);
 800088c:	20c8      	movs	r0, #200	; 0xc8
 800088e:	f000 fe2f 	bl	80014f0 <setTimer>
			}
			break;
 8000892:	e101      	b.n	8000a98 <fsm_step1+0x388>
	case BUTT_4:
			display7seg(4);
 8000894:	2004      	movs	r0, #4
 8000896:	f7ff fc59 	bl	800014c <display7seg>
			if(RESET_flag == 1){
 800089a:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <fsm_step1+0x280>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d105      	bne.n	80008ae <fsm_step1+0x19e>
				RESET_flag = 0;
 80008a2:	4b3b      	ldr	r3, [pc, #236]	; (8000990 <fsm_step1+0x280>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 80008a8:	4b38      	ldr	r3, [pc, #224]	; (800098c <fsm_step1+0x27c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
			}
			if(INC_flag == 1){
 80008ae:	4b39      	ldr	r3, [pc, #228]	; (8000994 <fsm_step1+0x284>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d108      	bne.n	80008c8 <fsm_step1+0x1b8>
				INC_flag = 0;
 80008b6:	4b37      	ldr	r3, [pc, #220]	; (8000994 <fsm_step1+0x284>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
				status = BUTT_5;
 80008bc:	4b33      	ldr	r3, [pc, #204]	; (800098c <fsm_step1+0x27c>)
 80008be:	2205      	movs	r2, #5
 80008c0:	601a      	str	r2, [r3, #0]
				setTimer(200);
 80008c2:	20c8      	movs	r0, #200	; 0xc8
 80008c4:	f000 fe14 	bl	80014f0 <setTimer>
			}
			if(DEC_flag == 1){
 80008c8:	4b33      	ldr	r3, [pc, #204]	; (8000998 <fsm_step1+0x288>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	f040 80e5 	bne.w	8000a9c <fsm_step1+0x38c>
				DEC_flag = 0;
 80008d2:	4b31      	ldr	r3, [pc, #196]	; (8000998 <fsm_step1+0x288>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
				status = BUTT_3;
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <fsm_step1+0x27c>)
 80008da:	2203      	movs	r2, #3
 80008dc:	601a      	str	r2, [r3, #0]
				setTimer(200);
 80008de:	20c8      	movs	r0, #200	; 0xc8
 80008e0:	f000 fe06 	bl	80014f0 <setTimer>
			}
			break;
 80008e4:	e0da      	b.n	8000a9c <fsm_step1+0x38c>
	case BUTT_5:
			display7seg(5);
 80008e6:	2005      	movs	r0, #5
 80008e8:	f7ff fc30 	bl	800014c <display7seg>
			if(RESET_flag == 1){
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <fsm_step1+0x280>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d105      	bne.n	8000900 <fsm_step1+0x1f0>
				RESET_flag = 0;
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <fsm_step1+0x280>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <fsm_step1+0x27c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
			}
			if(INC_flag == 1){
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <fsm_step1+0x284>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d108      	bne.n	800091a <fsm_step1+0x20a>
				INC_flag = 0;
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <fsm_step1+0x284>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
				status = BUTT_6;
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <fsm_step1+0x27c>)
 8000910:	2206      	movs	r2, #6
 8000912:	601a      	str	r2, [r3, #0]
				setTimer(200);
 8000914:	20c8      	movs	r0, #200	; 0xc8
 8000916:	f000 fdeb 	bl	80014f0 <setTimer>
			}
			if(DEC_flag == 1){
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <fsm_step1+0x288>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b01      	cmp	r3, #1
 8000920:	f040 80be 	bne.w	8000aa0 <fsm_step1+0x390>
				DEC_flag = 0;
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <fsm_step1+0x288>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
				status = BUTT_4;
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <fsm_step1+0x27c>)
 800092c:	2204      	movs	r2, #4
 800092e:	601a      	str	r2, [r3, #0]
				setTimer(200);
 8000930:	20c8      	movs	r0, #200	; 0xc8
 8000932:	f000 fddd 	bl	80014f0 <setTimer>
			}
			break;
 8000936:	e0b3      	b.n	8000aa0 <fsm_step1+0x390>
	case BUTT_6:
			display7seg(6);
 8000938:	2006      	movs	r0, #6
 800093a:	f7ff fc07 	bl	800014c <display7seg>
			if(RESET_flag == 1){
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <fsm_step1+0x280>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d105      	bne.n	8000952 <fsm_step1+0x242>
				RESET_flag = 0;
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <fsm_step1+0x280>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <fsm_step1+0x27c>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
			}
			if(INC_flag == 1){
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <fsm_step1+0x284>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d108      	bne.n	800096c <fsm_step1+0x25c>
				INC_flag = 0;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <fsm_step1+0x284>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
				status = BUTT_7;
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <fsm_step1+0x27c>)
 8000962:	2207      	movs	r2, #7
 8000964:	601a      	str	r2, [r3, #0]
				setTimer(200);
 8000966:	20c8      	movs	r0, #200	; 0xc8
 8000968:	f000 fdc2 	bl	80014f0 <setTimer>
			}
			if(DEC_flag == 1){
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <fsm_step1+0x288>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	f040 8097 	bne.w	8000aa4 <fsm_step1+0x394>
				DEC_flag = 0;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <fsm_step1+0x288>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
				status = BUTT_5;
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <fsm_step1+0x27c>)
 800097e:	2205      	movs	r2, #5
 8000980:	601a      	str	r2, [r3, #0]
				setTimer(200);
 8000982:	20c8      	movs	r0, #200	; 0xc8
 8000984:	f000 fdb4 	bl	80014f0 <setTimer>
			}
			break;
 8000988:	e08c      	b.n	8000aa4 <fsm_step1+0x394>
 800098a:	bf00      	nop
 800098c:	2000006c 	.word	0x2000006c
 8000990:	2000005c 	.word	0x2000005c
 8000994:	20000060 	.word	0x20000060
 8000998:	20000064 	.word	0x20000064
	case BUTT_7:
			display7seg(7);
 800099c:	2007      	movs	r0, #7
 800099e:	f7ff fbd5 	bl	800014c <display7seg>
			if(RESET_flag == 1){
 80009a2:	4b45      	ldr	r3, [pc, #276]	; (8000ab8 <fsm_step1+0x3a8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d105      	bne.n	80009b6 <fsm_step1+0x2a6>
				RESET_flag = 0;
 80009aa:	4b43      	ldr	r3, [pc, #268]	; (8000ab8 <fsm_step1+0x3a8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 80009b0:	4b42      	ldr	r3, [pc, #264]	; (8000abc <fsm_step1+0x3ac>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
			}
			if(INC_flag == 1){
 80009b6:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <fsm_step1+0x3b0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d108      	bne.n	80009d0 <fsm_step1+0x2c0>
				INC_flag = 0;
 80009be:	4b40      	ldr	r3, [pc, #256]	; (8000ac0 <fsm_step1+0x3b0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
				status = BUTT_8;
 80009c4:	4b3d      	ldr	r3, [pc, #244]	; (8000abc <fsm_step1+0x3ac>)
 80009c6:	2208      	movs	r2, #8
 80009c8:	601a      	str	r2, [r3, #0]
				setTimer(200);
 80009ca:	20c8      	movs	r0, #200	; 0xc8
 80009cc:	f000 fd90 	bl	80014f0 <setTimer>
			}
			if(DEC_flag == 1){
 80009d0:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <fsm_step1+0x3b4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d167      	bne.n	8000aa8 <fsm_step1+0x398>
				DEC_flag = 0;
 80009d8:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <fsm_step1+0x3b4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
				status = BUTT_6;
 80009de:	4b37      	ldr	r3, [pc, #220]	; (8000abc <fsm_step1+0x3ac>)
 80009e0:	2206      	movs	r2, #6
 80009e2:	601a      	str	r2, [r3, #0]
				setTimer(200);
 80009e4:	20c8      	movs	r0, #200	; 0xc8
 80009e6:	f000 fd83 	bl	80014f0 <setTimer>
			}
			break;
 80009ea:	e05d      	b.n	8000aa8 <fsm_step1+0x398>
	case BUTT_8:
			display7seg(8);
 80009ec:	2008      	movs	r0, #8
 80009ee:	f7ff fbad 	bl	800014c <display7seg>
			if(RESET_flag == 1){
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <fsm_step1+0x3a8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d105      	bne.n	8000a06 <fsm_step1+0x2f6>
				RESET_flag = 0;
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <fsm_step1+0x3a8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 8000a00:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <fsm_step1+0x3ac>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
			}
			if(INC_flag == 1){
 8000a06:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <fsm_step1+0x3b0>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d108      	bne.n	8000a20 <fsm_step1+0x310>
				INC_flag = 0;
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ac0 <fsm_step1+0x3b0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
				status = BUTT_9;
 8000a14:	4b29      	ldr	r3, [pc, #164]	; (8000abc <fsm_step1+0x3ac>)
 8000a16:	2209      	movs	r2, #9
 8000a18:	601a      	str	r2, [r3, #0]
				setTimer(200);
 8000a1a:	20c8      	movs	r0, #200	; 0xc8
 8000a1c:	f000 fd68 	bl	80014f0 <setTimer>
			}
			if(DEC_flag == 1){
 8000a20:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <fsm_step1+0x3b4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d141      	bne.n	8000aac <fsm_step1+0x39c>
				DEC_flag = 0;
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <fsm_step1+0x3b4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
				status = BUTT_7;
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <fsm_step1+0x3ac>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
				setTimer(200);
 8000a34:	20c8      	movs	r0, #200	; 0xc8
 8000a36:	f000 fd5b 	bl	80014f0 <setTimer>
			}
			break;
 8000a3a:	e037      	b.n	8000aac <fsm_step1+0x39c>
	case BUTT_9:
			display7seg(9);
 8000a3c:	2009      	movs	r0, #9
 8000a3e:	f7ff fb85 	bl	800014c <display7seg>
			if(RESET_flag == 1){
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <fsm_step1+0x3a8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d105      	bne.n	8000a56 <fsm_step1+0x346>
				RESET_flag = 0;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <fsm_step1+0x3a8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <fsm_step1+0x3ac>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
			}
			if(INC_flag == 1){
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <fsm_step1+0x3b0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d108      	bne.n	8000a70 <fsm_step1+0x360>
				INC_flag = 0;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <fsm_step1+0x3b0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
				status = BUTT_0;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <fsm_step1+0x3ac>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
				setTimer(200);
 8000a6a:	20c8      	movs	r0, #200	; 0xc8
 8000a6c:	f000 fd40 	bl	80014f0 <setTimer>
			}
			if(DEC_flag == 1){
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <fsm_step1+0x3b4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d11b      	bne.n	8000ab0 <fsm_step1+0x3a0>
				DEC_flag = 0;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <fsm_step1+0x3b4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
				status = BUTT_8;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <fsm_step1+0x3ac>)
 8000a80:	2208      	movs	r2, #8
 8000a82:	601a      	str	r2, [r3, #0]
				setTimer(200);
 8000a84:	20c8      	movs	r0, #200	; 0xc8
 8000a86:	f000 fd33 	bl	80014f0 <setTimer>
			}
			break;
 8000a8a:	e011      	b.n	8000ab0 <fsm_step1+0x3a0>
			break;
 8000a8c:	bf00      	nop
 8000a8e:	e010      	b.n	8000ab2 <fsm_step1+0x3a2>
			break;
 8000a90:	bf00      	nop
 8000a92:	e00e      	b.n	8000ab2 <fsm_step1+0x3a2>
			break;
 8000a94:	bf00      	nop
 8000a96:	e00c      	b.n	8000ab2 <fsm_step1+0x3a2>
			break;
 8000a98:	bf00      	nop
 8000a9a:	e00a      	b.n	8000ab2 <fsm_step1+0x3a2>
			break;
 8000a9c:	bf00      	nop
 8000a9e:	e008      	b.n	8000ab2 <fsm_step1+0x3a2>
			break;
 8000aa0:	bf00      	nop
 8000aa2:	e006      	b.n	8000ab2 <fsm_step1+0x3a2>
			break;
 8000aa4:	bf00      	nop
 8000aa6:	e004      	b.n	8000ab2 <fsm_step1+0x3a2>
			break;
 8000aa8:	bf00      	nop
 8000aaa:	e002      	b.n	8000ab2 <fsm_step1+0x3a2>
			break;
 8000aac:	bf00      	nop
 8000aae:	e000      	b.n	8000ab2 <fsm_step1+0x3a2>
			break;
 8000ab0:	bf00      	nop
	}
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000005c 	.word	0x2000005c
 8000abc:	2000006c 	.word	0x2000006c
 8000ac0:	20000060 	.word	0x20000060
 8000ac4:	20000064 	.word	0x20000064

08000ac8 <fsm_step2>:
 */
#include "button.h"
#include "7segdisplay.h"
#include "fsm_step2.h"

void fsm_step2(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	switch(status){
 8000acc:	4b93      	ldr	r3, [pc, #588]	; (8000d1c <fsm_step2+0x254>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3b0d      	subs	r3, #13
 8000ad2:	2b09      	cmp	r3, #9
 8000ad4:	f200 8120 	bhi.w	8000d18 <fsm_step2+0x250>
 8000ad8:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <fsm_step2+0x18>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000b09 	.word	0x08000b09
 8000ae4:	08000b3b 	.word	0x08000b3b
 8000ae8:	08000b6d 	.word	0x08000b6d
 8000aec:	08000b9f 	.word	0x08000b9f
 8000af0:	08000bd1 	.word	0x08000bd1
 8000af4:	08000c03 	.word	0x08000c03
 8000af8:	08000c33 	.word	0x08000c33
 8000afc:	08000c63 	.word	0x08000c63
 8000b00:	08000c93 	.word	0x08000c93
 8000b04:	08000cc3 	.word	0x08000cc3
	case LONG_0:
		display7seg(0);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fb1f 	bl	800014c <display7seg>
		if(timer_flag == 1) timer_flag = 0;
 8000b0e:	4b84      	ldr	r3, [pc, #528]	; (8000d20 <fsm_step2+0x258>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d102      	bne.n	8000b1c <fsm_step2+0x54>
 8000b16:	4b82      	ldr	r3, [pc, #520]	; (8000d20 <fsm_step2+0x258>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
		if(INC_flag1 == 1){
 8000b1c:	4b81      	ldr	r3, [pc, #516]	; (8000d24 <fsm_step2+0x25c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	f040 80e6 	bne.w	8000cf2 <fsm_step2+0x22a>
			INC_flag1 = 0;
 8000b26:	4b7f      	ldr	r3, [pc, #508]	; (8000d24 <fsm_step2+0x25c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
			status = LONG_1;
 8000b2c:	4b7b      	ldr	r3, [pc, #492]	; (8000d1c <fsm_step2+0x254>)
 8000b2e:	220e      	movs	r2, #14
 8000b30:	601a      	str	r2, [r3, #0]
			setTimer(100);
 8000b32:	2064      	movs	r0, #100	; 0x64
 8000b34:	f000 fcdc 	bl	80014f0 <setTimer>
		}
		break;
 8000b38:	e0db      	b.n	8000cf2 <fsm_step2+0x22a>
	case LONG_1:
		display7seg(1);
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f7ff fb06 	bl	800014c <display7seg>
		if(timer_flag == 1) timer_flag = 0;
 8000b40:	4b77      	ldr	r3, [pc, #476]	; (8000d20 <fsm_step2+0x258>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d102      	bne.n	8000b4e <fsm_step2+0x86>
 8000b48:	4b75      	ldr	r3, [pc, #468]	; (8000d20 <fsm_step2+0x258>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
		if(INC_flag1 ==1){
 8000b4e:	4b75      	ldr	r3, [pc, #468]	; (8000d24 <fsm_step2+0x25c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	f040 80cf 	bne.w	8000cf6 <fsm_step2+0x22e>
			INC_flag1 = 0;
 8000b58:	4b72      	ldr	r3, [pc, #456]	; (8000d24 <fsm_step2+0x25c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
			status = LONG_2;
 8000b5e:	4b6f      	ldr	r3, [pc, #444]	; (8000d1c <fsm_step2+0x254>)
 8000b60:	220f      	movs	r2, #15
 8000b62:	601a      	str	r2, [r3, #0]
			setTimer(100);
 8000b64:	2064      	movs	r0, #100	; 0x64
 8000b66:	f000 fcc3 	bl	80014f0 <setTimer>
		}
		break;
 8000b6a:	e0c4      	b.n	8000cf6 <fsm_step2+0x22e>
	case LONG_2:
		display7seg(2);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff faed 	bl	800014c <display7seg>
		if(timer_flag == 1) timer_flag = 0;
 8000b72:	4b6b      	ldr	r3, [pc, #428]	; (8000d20 <fsm_step2+0x258>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d102      	bne.n	8000b80 <fsm_step2+0xb8>
 8000b7a:	4b69      	ldr	r3, [pc, #420]	; (8000d20 <fsm_step2+0x258>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
		if(INC_flag1 ==1){
 8000b80:	4b68      	ldr	r3, [pc, #416]	; (8000d24 <fsm_step2+0x25c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	f040 80b8 	bne.w	8000cfa <fsm_step2+0x232>
			INC_flag1 = 0;
 8000b8a:	4b66      	ldr	r3, [pc, #408]	; (8000d24 <fsm_step2+0x25c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
			status = LONG_3;
 8000b90:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <fsm_step2+0x254>)
 8000b92:	2210      	movs	r2, #16
 8000b94:	601a      	str	r2, [r3, #0]
			setTimer(100);
 8000b96:	2064      	movs	r0, #100	; 0x64
 8000b98:	f000 fcaa 	bl	80014f0 <setTimer>
		}
		break;
 8000b9c:	e0ad      	b.n	8000cfa <fsm_step2+0x232>
	case LONG_3:
		display7seg(3);
 8000b9e:	2003      	movs	r0, #3
 8000ba0:	f7ff fad4 	bl	800014c <display7seg>
		if(timer_flag == 1) timer_flag = 0;
 8000ba4:	4b5e      	ldr	r3, [pc, #376]	; (8000d20 <fsm_step2+0x258>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d102      	bne.n	8000bb2 <fsm_step2+0xea>
 8000bac:	4b5c      	ldr	r3, [pc, #368]	; (8000d20 <fsm_step2+0x258>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
		if(INC_flag1 ==1){
 8000bb2:	4b5c      	ldr	r3, [pc, #368]	; (8000d24 <fsm_step2+0x25c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	f040 80a1 	bne.w	8000cfe <fsm_step2+0x236>
			INC_flag1 = 0;
 8000bbc:	4b59      	ldr	r3, [pc, #356]	; (8000d24 <fsm_step2+0x25c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
			status = LONG_4;
 8000bc2:	4b56      	ldr	r3, [pc, #344]	; (8000d1c <fsm_step2+0x254>)
 8000bc4:	2211      	movs	r2, #17
 8000bc6:	601a      	str	r2, [r3, #0]
			setTimer(100);
 8000bc8:	2064      	movs	r0, #100	; 0x64
 8000bca:	f000 fc91 	bl	80014f0 <setTimer>
		}
		break;
 8000bce:	e096      	b.n	8000cfe <fsm_step2+0x236>
	case LONG_4:
		display7seg(4);
 8000bd0:	2004      	movs	r0, #4
 8000bd2:	f7ff fabb 	bl	800014c <display7seg>
		if(timer_flag == 1) timer_flag = 0;
 8000bd6:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <fsm_step2+0x258>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d102      	bne.n	8000be4 <fsm_step2+0x11c>
 8000bde:	4b50      	ldr	r3, [pc, #320]	; (8000d20 <fsm_step2+0x258>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
		if(INC_flag1 ==1){
 8000be4:	4b4f      	ldr	r3, [pc, #316]	; (8000d24 <fsm_step2+0x25c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	f040 808a 	bne.w	8000d02 <fsm_step2+0x23a>
			INC_flag1 = 0;
 8000bee:	4b4d      	ldr	r3, [pc, #308]	; (8000d24 <fsm_step2+0x25c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
			status = LONG_5;
 8000bf4:	4b49      	ldr	r3, [pc, #292]	; (8000d1c <fsm_step2+0x254>)
 8000bf6:	2212      	movs	r2, #18
 8000bf8:	601a      	str	r2, [r3, #0]
			setTimer(100);
 8000bfa:	2064      	movs	r0, #100	; 0x64
 8000bfc:	f000 fc78 	bl	80014f0 <setTimer>
		}
		break;
 8000c00:	e07f      	b.n	8000d02 <fsm_step2+0x23a>
	case LONG_5:
		display7seg(5);
 8000c02:	2005      	movs	r0, #5
 8000c04:	f7ff faa2 	bl	800014c <display7seg>
		if(timer_flag == 1) timer_flag = 0;
 8000c08:	4b45      	ldr	r3, [pc, #276]	; (8000d20 <fsm_step2+0x258>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d102      	bne.n	8000c16 <fsm_step2+0x14e>
 8000c10:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <fsm_step2+0x258>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
		if(INC_flag1 ==1){
 8000c16:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <fsm_step2+0x25c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d173      	bne.n	8000d06 <fsm_step2+0x23e>
			INC_flag1 = 0;
 8000c1e:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <fsm_step2+0x25c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
			status = LONG_5;
 8000c24:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <fsm_step2+0x254>)
 8000c26:	2212      	movs	r2, #18
 8000c28:	601a      	str	r2, [r3, #0]
			setTimer(100);
 8000c2a:	2064      	movs	r0, #100	; 0x64
 8000c2c:	f000 fc60 	bl	80014f0 <setTimer>
		}
		break;
 8000c30:	e069      	b.n	8000d06 <fsm_step2+0x23e>
	case LONG_6:
		display7seg(6);
 8000c32:	2006      	movs	r0, #6
 8000c34:	f7ff fa8a 	bl	800014c <display7seg>
		if(timer_flag == 1) timer_flag = 0;
 8000c38:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <fsm_step2+0x258>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d102      	bne.n	8000c46 <fsm_step2+0x17e>
 8000c40:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <fsm_step2+0x258>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
		if(INC_flag1 ==1){
 8000c46:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <fsm_step2+0x25c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d15d      	bne.n	8000d0a <fsm_step2+0x242>
			INC_flag1 = 0;
 8000c4e:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <fsm_step2+0x25c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
			status = LONG_7;
 8000c54:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <fsm_step2+0x254>)
 8000c56:	2214      	movs	r2, #20
 8000c58:	601a      	str	r2, [r3, #0]
			setTimer(100);
 8000c5a:	2064      	movs	r0, #100	; 0x64
 8000c5c:	f000 fc48 	bl	80014f0 <setTimer>
		}
		break;
 8000c60:	e053      	b.n	8000d0a <fsm_step2+0x242>
	case LONG_7:
		display7seg(7);
 8000c62:	2007      	movs	r0, #7
 8000c64:	f7ff fa72 	bl	800014c <display7seg>
		if(timer_flag == 1) timer_flag = 0;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <fsm_step2+0x258>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d102      	bne.n	8000c76 <fsm_step2+0x1ae>
 8000c70:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <fsm_step2+0x258>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
		if(INC_flag1 ==1){
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <fsm_step2+0x25c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d147      	bne.n	8000d0e <fsm_step2+0x246>
			INC_flag1 = 0;
 8000c7e:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <fsm_step2+0x25c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
			status = LONG_8;
 8000c84:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <fsm_step2+0x254>)
 8000c86:	2215      	movs	r2, #21
 8000c88:	601a      	str	r2, [r3, #0]
			setTimer(100);
 8000c8a:	2064      	movs	r0, #100	; 0x64
 8000c8c:	f000 fc30 	bl	80014f0 <setTimer>
		}
		break;
 8000c90:	e03d      	b.n	8000d0e <fsm_step2+0x246>
	case LONG_8:
		display7seg(8);
 8000c92:	2008      	movs	r0, #8
 8000c94:	f7ff fa5a 	bl	800014c <display7seg>
		if(timer_flag == 1) timer_flag = 0;
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <fsm_step2+0x258>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d102      	bne.n	8000ca6 <fsm_step2+0x1de>
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <fsm_step2+0x258>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
		if(INC_flag1 ==1){
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <fsm_step2+0x25c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d131      	bne.n	8000d12 <fsm_step2+0x24a>
			INC_flag1 = 0;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <fsm_step2+0x25c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
			status = LONG_9;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <fsm_step2+0x254>)
 8000cb6:	2216      	movs	r2, #22
 8000cb8:	601a      	str	r2, [r3, #0]
			setTimer(100);
 8000cba:	2064      	movs	r0, #100	; 0x64
 8000cbc:	f000 fc18 	bl	80014f0 <setTimer>
		}
		break;
 8000cc0:	e027      	b.n	8000d12 <fsm_step2+0x24a>
	case LONG_9:
		display7seg(9);
 8000cc2:	2009      	movs	r0, #9
 8000cc4:	f7ff fa42 	bl	800014c <display7seg>
		if(timer_flag == 1) timer_flag = 0;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <fsm_step2+0x258>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d102      	bne.n	8000cd6 <fsm_step2+0x20e>
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <fsm_step2+0x258>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
		if(INC_flag1 ==1){
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <fsm_step2+0x25c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d11b      	bne.n	8000d16 <fsm_step2+0x24e>
			INC_flag1 = 0;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <fsm_step2+0x25c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
			status = LONG_0;
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <fsm_step2+0x254>)
 8000ce6:	220d      	movs	r2, #13
 8000ce8:	601a      	str	r2, [r3, #0]
			setTimer(100);
 8000cea:	2064      	movs	r0, #100	; 0x64
 8000cec:	f000 fc00 	bl	80014f0 <setTimer>
		}
		break;
 8000cf0:	e011      	b.n	8000d16 <fsm_step2+0x24e>
		break;
 8000cf2:	bf00      	nop
 8000cf4:	e010      	b.n	8000d18 <fsm_step2+0x250>
		break;
 8000cf6:	bf00      	nop
 8000cf8:	e00e      	b.n	8000d18 <fsm_step2+0x250>
		break;
 8000cfa:	bf00      	nop
 8000cfc:	e00c      	b.n	8000d18 <fsm_step2+0x250>
		break;
 8000cfe:	bf00      	nop
 8000d00:	e00a      	b.n	8000d18 <fsm_step2+0x250>
		break;
 8000d02:	bf00      	nop
 8000d04:	e008      	b.n	8000d18 <fsm_step2+0x250>
		break;
 8000d06:	bf00      	nop
 8000d08:	e006      	b.n	8000d18 <fsm_step2+0x250>
		break;
 8000d0a:	bf00      	nop
 8000d0c:	e004      	b.n	8000d18 <fsm_step2+0x250>
		break;
 8000d0e:	bf00      	nop
 8000d10:	e002      	b.n	8000d18 <fsm_step2+0x250>
		break;
 8000d12:	bf00      	nop
 8000d14:	e000      	b.n	8000d18 <fsm_step2+0x250>
		break;
 8000d16:	bf00      	nop
	}
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000006c 	.word	0x2000006c
 8000d20:	20000080 	.word	0x20000080
 8000d24:	20000068 	.word	0x20000068

08000d28 <fsm_step3>:
#include "global.h"
#include "button.h"
#include "main.h"
#include "7segdisplay.h"

void fsm_step3(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	switch(status){
 8000d2c:	4b9e      	ldr	r3, [pc, #632]	; (8000fa8 <fsm_step3+0x280>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3b17      	subs	r3, #23
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	f200 8214 	bhi.w	8001160 <fsm_step3+0x438>
 8000d38:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <fsm_step3+0x18>)
 8000d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3e:	bf00      	nop
 8000d40:	08000d87 	.word	0x08000d87
 8000d44:	08000dc7 	.word	0x08000dc7
 8000d48:	08000e27 	.word	0x08000e27
 8000d4c:	08000e87 	.word	0x08000e87
 8000d50:	08000ee7 	.word	0x08000ee7
 8000d54:	08000f47 	.word	0x08000f47
 8000d58:	08000fc1 	.word	0x08000fc1
 8000d5c:	08001021 	.word	0x08001021
 8000d60:	0800107f 	.word	0x0800107f
 8000d64:	080010dd 	.word	0x080010dd
 8000d68:	08000d6d 	.word	0x08000d6d
	case INIT:
	display7seg(0);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff f9ed 	bl	800014c <display7seg>
	status = BUTT_0;
 8000d72:	4b8d      	ldr	r3, [pc, #564]	; (8000fa8 <fsm_step3+0x280>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
	setTimer1(200);
 8000d78:	20c8      	movs	r0, #200	; 0xc8
 8000d7a:	f000 fbcd 	bl	8001518 <setTimer1>
	ledstatus = LED_ON;
 8000d7e:	4b8b      	ldr	r3, [pc, #556]	; (8000fac <fsm_step3+0x284>)
 8000d80:	220b      	movs	r2, #11
 8000d82:	601a      	str	r2, [r3, #0]
	break;
 8000d84:	e1ec      	b.n	8001160 <fsm_step3+0x438>
	case AUTO_0:
	if(RESET_flag == 1){
 8000d86:	4b8a      	ldr	r3, [pc, #552]	; (8000fb0 <fsm_step3+0x288>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d105      	bne.n	8000d9a <fsm_step3+0x72>
		RESET_flag = 0;
 8000d8e:	4b88      	ldr	r3, [pc, #544]	; (8000fb0 <fsm_step3+0x288>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000d94:	4b84      	ldr	r3, [pc, #528]	; (8000fa8 <fsm_step3+0x280>)
 8000d96:	2221      	movs	r2, #33	; 0x21
 8000d98:	601a      	str	r2, [r3, #0]
	}
	if(INC_flag == 1){
 8000d9a:	4b86      	ldr	r3, [pc, #536]	; (8000fb4 <fsm_step3+0x28c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d105      	bne.n	8000dae <fsm_step3+0x86>
		INC_flag = 0;
 8000da2:	4b84      	ldr	r3, [pc, #528]	; (8000fb4 <fsm_step3+0x28c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
		display7seg(0);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff f9cf 	bl	800014c <display7seg>
	}
	if(DEC_flag == 1){
 8000dae:	4b82      	ldr	r3, [pc, #520]	; (8000fb8 <fsm_step3+0x290>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	f040 81c1 	bne.w	800113a <fsm_step3+0x412>
		DEC_flag = 0;
 8000db8:	4b7f      	ldr	r3, [pc, #508]	; (8000fb8 <fsm_step3+0x290>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
		status = BUTT_0;
 8000dbe:	4b7a      	ldr	r3, [pc, #488]	; (8000fa8 <fsm_step3+0x280>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
	}
	break;
 8000dc4:	e1b9      	b.n	800113a <fsm_step3+0x412>
	case AUTO_1:
	if(RESET_flag == 1){
 8000dc6:	4b7a      	ldr	r3, [pc, #488]	; (8000fb0 <fsm_step3+0x288>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d105      	bne.n	8000dda <fsm_step3+0xb2>
		RESET_flag = 0;
 8000dce:	4b78      	ldr	r3, [pc, #480]	; (8000fb0 <fsm_step3+0x288>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000dd4:	4b74      	ldr	r3, [pc, #464]	; (8000fa8 <fsm_step3+0x280>)
 8000dd6:	2221      	movs	r2, #33	; 0x21
 8000dd8:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag1 == 1){
 8000dda:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <fsm_step3+0x294>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d10b      	bne.n	8000dfa <fsm_step3+0xd2>
		timer_flag1 = 0;
 8000de2:	4b76      	ldr	r3, [pc, #472]	; (8000fbc <fsm_step3+0x294>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
		display7seg(1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff f9af 	bl	800014c <display7seg>
		status = AUTO_0;
 8000dee:	4b6e      	ldr	r3, [pc, #440]	; (8000fa8 <fsm_step3+0x280>)
 8000df0:	2217      	movs	r2, #23
 8000df2:	601a      	str	r2, [r3, #0]
		setTimer1(100);
 8000df4:	2064      	movs	r0, #100	; 0x64
 8000df6:	f000 fb8f 	bl	8001518 <setTimer1>
	}
	if(INC_flag == 1){
 8000dfa:	4b6e      	ldr	r3, [pc, #440]	; (8000fb4 <fsm_step3+0x28c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d105      	bne.n	8000e0e <fsm_step3+0xe6>
		INC_flag = 0;
 8000e02:	4b6c      	ldr	r3, [pc, #432]	; (8000fb4 <fsm_step3+0x28c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
		status = BUTT_1;
 8000e08:	4b67      	ldr	r3, [pc, #412]	; (8000fa8 <fsm_step3+0x280>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]
	}
	if(DEC_flag == 1){
 8000e0e:	4b6a      	ldr	r3, [pc, #424]	; (8000fb8 <fsm_step3+0x290>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	f040 8193 	bne.w	800113e <fsm_step3+0x416>
		DEC_flag = 0;
 8000e18:	4b67      	ldr	r3, [pc, #412]	; (8000fb8 <fsm_step3+0x290>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
		status = BUTT_1;
 8000e1e:	4b62      	ldr	r3, [pc, #392]	; (8000fa8 <fsm_step3+0x280>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
	}
	break;
 8000e24:	e18b      	b.n	800113e <fsm_step3+0x416>
	case AUTO_2:
	if(RESET_flag == 1){
 8000e26:	4b62      	ldr	r3, [pc, #392]	; (8000fb0 <fsm_step3+0x288>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d105      	bne.n	8000e3a <fsm_step3+0x112>
		RESET_flag = 0;
 8000e2e:	4b60      	ldr	r3, [pc, #384]	; (8000fb0 <fsm_step3+0x288>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000e34:	4b5c      	ldr	r3, [pc, #368]	; (8000fa8 <fsm_step3+0x280>)
 8000e36:	2221      	movs	r2, #33	; 0x21
 8000e38:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag1 == 1){
 8000e3a:	4b60      	ldr	r3, [pc, #384]	; (8000fbc <fsm_step3+0x294>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d10b      	bne.n	8000e5a <fsm_step3+0x132>
		timer_flag1 = 0;
 8000e42:	4b5e      	ldr	r3, [pc, #376]	; (8000fbc <fsm_step3+0x294>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
		display7seg(2);
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f7ff f97f 	bl	800014c <display7seg>
		status = AUTO_1;
 8000e4e:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <fsm_step3+0x280>)
 8000e50:	2218      	movs	r2, #24
 8000e52:	601a      	str	r2, [r3, #0]
		setTimer1(100);
 8000e54:	2064      	movs	r0, #100	; 0x64
 8000e56:	f000 fb5f 	bl	8001518 <setTimer1>
	}
	if(INC_flag == 1){
 8000e5a:	4b56      	ldr	r3, [pc, #344]	; (8000fb4 <fsm_step3+0x28c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d105      	bne.n	8000e6e <fsm_step3+0x146>
		INC_flag = 0;
 8000e62:	4b54      	ldr	r3, [pc, #336]	; (8000fb4 <fsm_step3+0x28c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
		status = BUTT_2;
 8000e68:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <fsm_step3+0x280>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	601a      	str	r2, [r3, #0]
	}
	if(DEC_flag == 1){
 8000e6e:	4b52      	ldr	r3, [pc, #328]	; (8000fb8 <fsm_step3+0x290>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	f040 8165 	bne.w	8001142 <fsm_step3+0x41a>
		DEC_flag = 0;
 8000e78:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <fsm_step3+0x290>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
		status = BUTT_2;
 8000e7e:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <fsm_step3+0x280>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	601a      	str	r2, [r3, #0]
	}
	break;
 8000e84:	e15d      	b.n	8001142 <fsm_step3+0x41a>
	case AUTO_3:
	if(RESET_flag == 1){
 8000e86:	4b4a      	ldr	r3, [pc, #296]	; (8000fb0 <fsm_step3+0x288>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d105      	bne.n	8000e9a <fsm_step3+0x172>
		RESET_flag = 0;
 8000e8e:	4b48      	ldr	r3, [pc, #288]	; (8000fb0 <fsm_step3+0x288>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000e94:	4b44      	ldr	r3, [pc, #272]	; (8000fa8 <fsm_step3+0x280>)
 8000e96:	2221      	movs	r2, #33	; 0x21
 8000e98:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag1 == 1){
 8000e9a:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <fsm_step3+0x294>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10b      	bne.n	8000eba <fsm_step3+0x192>
		timer_flag1 = 0;
 8000ea2:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <fsm_step3+0x294>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
		display7seg(3);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f7ff f94f 	bl	800014c <display7seg>
		status = AUTO_2;
 8000eae:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <fsm_step3+0x280>)
 8000eb0:	2219      	movs	r2, #25
 8000eb2:	601a      	str	r2, [r3, #0]
		setTimer1(100);
 8000eb4:	2064      	movs	r0, #100	; 0x64
 8000eb6:	f000 fb2f 	bl	8001518 <setTimer1>
	}
	if(INC_flag == 1){
 8000eba:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <fsm_step3+0x28c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d105      	bne.n	8000ece <fsm_step3+0x1a6>
		INC_flag = 0;
 8000ec2:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <fsm_step3+0x28c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
		status = BUTT_3;
 8000ec8:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <fsm_step3+0x280>)
 8000eca:	2203      	movs	r2, #3
 8000ecc:	601a      	str	r2, [r3, #0]
	}
	if(DEC_flag == 1){
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <fsm_step3+0x290>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	f040 8137 	bne.w	8001146 <fsm_step3+0x41e>
		DEC_flag = 0;
 8000ed8:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <fsm_step3+0x290>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
		status = BUTT_3;
 8000ede:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <fsm_step3+0x280>)
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	601a      	str	r2, [r3, #0]
	}
	break;
 8000ee4:	e12f      	b.n	8001146 <fsm_step3+0x41e>
	case AUTO_4:
	if(RESET_flag == 1){
 8000ee6:	4b32      	ldr	r3, [pc, #200]	; (8000fb0 <fsm_step3+0x288>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d105      	bne.n	8000efa <fsm_step3+0x1d2>
		RESET_flag = 0;
 8000eee:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <fsm_step3+0x288>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <fsm_step3+0x280>)
 8000ef6:	2221      	movs	r2, #33	; 0x21
 8000ef8:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag1 == 1){
 8000efa:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <fsm_step3+0x294>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d10b      	bne.n	8000f1a <fsm_step3+0x1f2>
		timer_flag1 = 0;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <fsm_step3+0x294>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
		display7seg(4);
 8000f08:	2004      	movs	r0, #4
 8000f0a:	f7ff f91f 	bl	800014c <display7seg>
		status = AUTO_3;
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <fsm_step3+0x280>)
 8000f10:	221a      	movs	r2, #26
 8000f12:	601a      	str	r2, [r3, #0]
		setTimer1(100);
 8000f14:	2064      	movs	r0, #100	; 0x64
 8000f16:	f000 faff 	bl	8001518 <setTimer1>
	}
	if(INC_flag == 1){
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <fsm_step3+0x28c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d105      	bne.n	8000f2e <fsm_step3+0x206>
		INC_flag = 0;
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <fsm_step3+0x28c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
		status = BUTT_4;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <fsm_step3+0x280>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	601a      	str	r2, [r3, #0]
	}
	if(DEC_flag == 1){
 8000f2e:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <fsm_step3+0x290>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	f040 8109 	bne.w	800114a <fsm_step3+0x422>
		DEC_flag = 0;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <fsm_step3+0x290>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
		status = BUTT_4;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <fsm_step3+0x280>)
 8000f40:	2204      	movs	r2, #4
 8000f42:	601a      	str	r2, [r3, #0]
	}
	break;
 8000f44:	e101      	b.n	800114a <fsm_step3+0x422>
	case AUTO_5:
	if(RESET_flag == 1){
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <fsm_step3+0x288>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d105      	bne.n	8000f5a <fsm_step3+0x232>
		RESET_flag = 0;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <fsm_step3+0x288>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <fsm_step3+0x280>)
 8000f56:	2221      	movs	r2, #33	; 0x21
 8000f58:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag1 == 1){
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <fsm_step3+0x294>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d10b      	bne.n	8000f7a <fsm_step3+0x252>
		timer_flag1 = 0;
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <fsm_step3+0x294>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
		display7seg(5);
 8000f68:	2005      	movs	r0, #5
 8000f6a:	f7ff f8ef 	bl	800014c <display7seg>
		status = AUTO_4;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <fsm_step3+0x280>)
 8000f70:	221b      	movs	r2, #27
 8000f72:	601a      	str	r2, [r3, #0]
		setTimer1(100);
 8000f74:	2064      	movs	r0, #100	; 0x64
 8000f76:	f000 facf 	bl	8001518 <setTimer1>
	}
	if(INC_flag == 1){
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <fsm_step3+0x28c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d105      	bne.n	8000f8e <fsm_step3+0x266>
		INC_flag = 0;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <fsm_step3+0x28c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
		status = BUTT_5;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <fsm_step3+0x280>)
 8000f8a:	2205      	movs	r2, #5
 8000f8c:	601a      	str	r2, [r3, #0]
	}
	if(DEC_flag == 1){
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <fsm_step3+0x290>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	f040 80db 	bne.w	800114e <fsm_step3+0x426>
		DEC_flag = 0;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <fsm_step3+0x290>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
		status = BUTT_5;
 8000f9e:	4b02      	ldr	r3, [pc, #8]	; (8000fa8 <fsm_step3+0x280>)
 8000fa0:	2205      	movs	r2, #5
 8000fa2:	601a      	str	r2, [r3, #0]
	}
	break;
 8000fa4:	e0d3      	b.n	800114e <fsm_step3+0x426>
 8000fa6:	bf00      	nop
 8000fa8:	2000006c 	.word	0x2000006c
 8000fac:	20000070 	.word	0x20000070
 8000fb0:	2000005c 	.word	0x2000005c
 8000fb4:	20000060 	.word	0x20000060
 8000fb8:	20000064 	.word	0x20000064
 8000fbc:	20000084 	.word	0x20000084
	case AUTO_6:
	if(RESET_flag == 1){
 8000fc0:	4b68      	ldr	r3, [pc, #416]	; (8001164 <fsm_step3+0x43c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d105      	bne.n	8000fd4 <fsm_step3+0x2ac>
		RESET_flag = 0;
 8000fc8:	4b66      	ldr	r3, [pc, #408]	; (8001164 <fsm_step3+0x43c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000fce:	4b66      	ldr	r3, [pc, #408]	; (8001168 <fsm_step3+0x440>)
 8000fd0:	2221      	movs	r2, #33	; 0x21
 8000fd2:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag1 == 1){
 8000fd4:	4b65      	ldr	r3, [pc, #404]	; (800116c <fsm_step3+0x444>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10b      	bne.n	8000ff4 <fsm_step3+0x2cc>
		timer_flag1 = 0;
 8000fdc:	4b63      	ldr	r3, [pc, #396]	; (800116c <fsm_step3+0x444>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
		display7seg(6);
 8000fe2:	2006      	movs	r0, #6
 8000fe4:	f7ff f8b2 	bl	800014c <display7seg>
		status = AUTO_5;
 8000fe8:	4b5f      	ldr	r3, [pc, #380]	; (8001168 <fsm_step3+0x440>)
 8000fea:	221c      	movs	r2, #28
 8000fec:	601a      	str	r2, [r3, #0]
		setTimer1(100);
 8000fee:	2064      	movs	r0, #100	; 0x64
 8000ff0:	f000 fa92 	bl	8001518 <setTimer1>
	}
	if(INC_flag == 1){
 8000ff4:	4b5e      	ldr	r3, [pc, #376]	; (8001170 <fsm_step3+0x448>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <fsm_step3+0x2e0>
		INC_flag = 0;
 8000ffc:	4b5c      	ldr	r3, [pc, #368]	; (8001170 <fsm_step3+0x448>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
		status = BUTT_6;
 8001002:	4b59      	ldr	r3, [pc, #356]	; (8001168 <fsm_step3+0x440>)
 8001004:	2206      	movs	r2, #6
 8001006:	601a      	str	r2, [r3, #0]
	}
	if(DEC_flag == 1){
 8001008:	4b5a      	ldr	r3, [pc, #360]	; (8001174 <fsm_step3+0x44c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	f040 80a0 	bne.w	8001152 <fsm_step3+0x42a>
		DEC_flag = 0;
 8001012:	4b58      	ldr	r3, [pc, #352]	; (8001174 <fsm_step3+0x44c>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
		status = BUTT_6;
 8001018:	4b53      	ldr	r3, [pc, #332]	; (8001168 <fsm_step3+0x440>)
 800101a:	2206      	movs	r2, #6
 800101c:	601a      	str	r2, [r3, #0]
	}
	break;
 800101e:	e098      	b.n	8001152 <fsm_step3+0x42a>
	case AUTO_7:
	if(RESET_flag == 1){
 8001020:	4b50      	ldr	r3, [pc, #320]	; (8001164 <fsm_step3+0x43c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d105      	bne.n	8001034 <fsm_step3+0x30c>
		RESET_flag = 0;
 8001028:	4b4e      	ldr	r3, [pc, #312]	; (8001164 <fsm_step3+0x43c>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
		status = INIT;
 800102e:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <fsm_step3+0x440>)
 8001030:	2221      	movs	r2, #33	; 0x21
 8001032:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag1 == 1){
 8001034:	4b4d      	ldr	r3, [pc, #308]	; (800116c <fsm_step3+0x444>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d10b      	bne.n	8001054 <fsm_step3+0x32c>
		timer_flag1 = 0;
 800103c:	4b4b      	ldr	r3, [pc, #300]	; (800116c <fsm_step3+0x444>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
		display7seg(7);
 8001042:	2007      	movs	r0, #7
 8001044:	f7ff f882 	bl	800014c <display7seg>
		status = AUTO_6;
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <fsm_step3+0x440>)
 800104a:	221d      	movs	r2, #29
 800104c:	601a      	str	r2, [r3, #0]
		setTimer1(100);
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f000 fa62 	bl	8001518 <setTimer1>
	}
	if(INC_flag == 1){
 8001054:	4b46      	ldr	r3, [pc, #280]	; (8001170 <fsm_step3+0x448>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d105      	bne.n	8001068 <fsm_step3+0x340>
		INC_flag = 0;
 800105c:	4b44      	ldr	r3, [pc, #272]	; (8001170 <fsm_step3+0x448>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
		status = BUTT_7;
 8001062:	4b41      	ldr	r3, [pc, #260]	; (8001168 <fsm_step3+0x440>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
	}
	if(DEC_flag == 1){
 8001068:	4b42      	ldr	r3, [pc, #264]	; (8001174 <fsm_step3+0x44c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d172      	bne.n	8001156 <fsm_step3+0x42e>
		DEC_flag = 0;
 8001070:	4b40      	ldr	r3, [pc, #256]	; (8001174 <fsm_step3+0x44c>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
		status = BUTT_7;
 8001076:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <fsm_step3+0x440>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
	}
	break;
 800107c:	e06b      	b.n	8001156 <fsm_step3+0x42e>
	case AUTO_8:
	if(RESET_flag == 1){
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <fsm_step3+0x43c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d105      	bne.n	8001092 <fsm_step3+0x36a>
		RESET_flag = 0;
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <fsm_step3+0x43c>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
		status = INIT;
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <fsm_step3+0x440>)
 800108e:	2221      	movs	r2, #33	; 0x21
 8001090:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag1 == 1){
 8001092:	4b36      	ldr	r3, [pc, #216]	; (800116c <fsm_step3+0x444>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d10b      	bne.n	80010b2 <fsm_step3+0x38a>
		timer_flag1 = 0;
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <fsm_step3+0x444>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
		display7seg(8);
 80010a0:	2008      	movs	r0, #8
 80010a2:	f7ff f853 	bl	800014c <display7seg>
		status = AUTO_7;
 80010a6:	4b30      	ldr	r3, [pc, #192]	; (8001168 <fsm_step3+0x440>)
 80010a8:	221e      	movs	r2, #30
 80010aa:	601a      	str	r2, [r3, #0]
		setTimer1(100);
 80010ac:	2064      	movs	r0, #100	; 0x64
 80010ae:	f000 fa33 	bl	8001518 <setTimer1>
	}
	if(INC_flag == 1){
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <fsm_step3+0x448>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d105      	bne.n	80010c6 <fsm_step3+0x39e>
		INC_flag = 0;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <fsm_step3+0x448>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
		status = BUTT_8;
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <fsm_step3+0x440>)
 80010c2:	2208      	movs	r2, #8
 80010c4:	601a      	str	r2, [r3, #0]
	}
	if(DEC_flag == 1){
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <fsm_step3+0x44c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d145      	bne.n	800115a <fsm_step3+0x432>
		DEC_flag = 0;
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <fsm_step3+0x44c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
		status = BUTT_8;
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <fsm_step3+0x440>)
 80010d6:	2208      	movs	r2, #8
 80010d8:	601a      	str	r2, [r3, #0]
	}
	break;
 80010da:	e03e      	b.n	800115a <fsm_step3+0x432>
	case AUTO_9:
	if(RESET_flag == 1){
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <fsm_step3+0x43c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d105      	bne.n	80010f0 <fsm_step3+0x3c8>
		RESET_flag = 0;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <fsm_step3+0x43c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
		status = INIT;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <fsm_step3+0x440>)
 80010ec:	2221      	movs	r2, #33	; 0x21
 80010ee:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag1 == 1){
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <fsm_step3+0x444>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d10b      	bne.n	8001110 <fsm_step3+0x3e8>
		timer_flag1 = 0;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <fsm_step3+0x444>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
		display7seg(9);
 80010fe:	2009      	movs	r0, #9
 8001100:	f7ff f824 	bl	800014c <display7seg>
		status = AUTO_8;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <fsm_step3+0x440>)
 8001106:	221f      	movs	r2, #31
 8001108:	601a      	str	r2, [r3, #0]
		setTimer1(100);
 800110a:	2064      	movs	r0, #100	; 0x64
 800110c:	f000 fa04 	bl	8001518 <setTimer1>
	}
	if(INC_flag == 1){
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <fsm_step3+0x448>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <fsm_step3+0x3fc>
		INC_flag = 0;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <fsm_step3+0x448>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
		status = BUTT_9;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <fsm_step3+0x440>)
 8001120:	2209      	movs	r2, #9
 8001122:	601a      	str	r2, [r3, #0]
	}
	if(DEC_flag == 1){
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <fsm_step3+0x44c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d118      	bne.n	800115e <fsm_step3+0x436>
		DEC_flag = 0;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <fsm_step3+0x44c>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
		status = BUTT_9;
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <fsm_step3+0x440>)
 8001134:	2209      	movs	r2, #9
 8001136:	601a      	str	r2, [r3, #0]
	}
	break;
 8001138:	e011      	b.n	800115e <fsm_step3+0x436>
	break;
 800113a:	bf00      	nop
 800113c:	e010      	b.n	8001160 <fsm_step3+0x438>
	break;
 800113e:	bf00      	nop
 8001140:	e00e      	b.n	8001160 <fsm_step3+0x438>
	break;
 8001142:	bf00      	nop
 8001144:	e00c      	b.n	8001160 <fsm_step3+0x438>
	break;
 8001146:	bf00      	nop
 8001148:	e00a      	b.n	8001160 <fsm_step3+0x438>
	break;
 800114a:	bf00      	nop
 800114c:	e008      	b.n	8001160 <fsm_step3+0x438>
	break;
 800114e:	bf00      	nop
 8001150:	e006      	b.n	8001160 <fsm_step3+0x438>
	break;
 8001152:	bf00      	nop
 8001154:	e004      	b.n	8001160 <fsm_step3+0x438>
	break;
 8001156:	bf00      	nop
 8001158:	e002      	b.n	8001160 <fsm_step3+0x438>
	break;
 800115a:	bf00      	nop
 800115c:	e000      	b.n	8001160 <fsm_step3+0x438>
	break;
 800115e:	bf00      	nop
	}
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000005c 	.word	0x2000005c
 8001168:	2000006c 	.word	0x2000006c
 800116c:	20000084 	.word	0x20000084
 8001170:	20000060 	.word	0x20000060
 8001174:	20000064 	.word	0x20000064

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f000 fa48 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f81c 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f000 f8a2 	bl	80012cc <MX_GPIO_Init>
  MX_TIM2_Init();
 8001188:	f000 f854 	bl	8001234 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <main+0x38>)
 800118e:	f001 f991 	bl	80024b4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = BUTT_0;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <main+0x3c>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
  ledstatus = LED_INIT;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <main+0x40>)
 800119a:	220a      	movs	r2, #10
 800119c:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_step1();
 800119e:	f7ff fab7 	bl	8000710 <fsm_step1>
	  DebugLed();
 80011a2:	f7ff f961 	bl	8000468 <DebugLed>
	  fsm_step2();
 80011a6:	f7ff fc8f 	bl	8000ac8 <fsm_step2>
	  fsm_step3();
 80011aa:	f7ff fdbd 	bl	8000d28 <fsm_step3>
	  fsm_step1();
 80011ae:	e7f6      	b.n	800119e <main+0x26>
 80011b0:	2000008c 	.word	0x2000008c
 80011b4:	2000006c 	.word	0x2000006c
 80011b8:	20000070 	.word	0x20000070

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b090      	sub	sp, #64	; 0x40
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 0318 	add.w	r3, r7, #24
 80011c6:	2228      	movs	r2, #40	; 0x28
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fd2a 	bl	8002c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e2:	2301      	movs	r3, #1
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e6:	2310      	movs	r3, #16
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	f107 0318 	add.w	r3, r7, #24
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fd26 	bl	8001c44 <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011fe:	f000 f8e3 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f000 ff92 	bl	8002144 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001226:	f000 f8cf 	bl	80013c8 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3740      	adds	r7, #64	; 0x40
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001256:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_TIM2_Init+0x94>)
 800125a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800125e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001268:	2209      	movs	r2, #9
 800126a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_TIM2_Init+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001278:	4813      	ldr	r0, [pc, #76]	; (80012c8 <MX_TIM2_Init+0x94>)
 800127a:	f001 f8cb 	bl	8002414 <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001284:	f000 f8a0 	bl	80013c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	4619      	mov	r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <MX_TIM2_Init+0x94>)
 8001296:	f001 fa61 	bl	800275c <HAL_TIM_ConfigClockSource>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012a0:	f000 f892 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_TIM2_Init+0x94>)
 80012b2:	f001 fc29 	bl	8002b08 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f000 f884 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000008c 	.word	0x2000008c

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <MX_GPIO_Init+0xcc>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a2c      	ldr	r2, [pc, #176]	; (8001398 <MX_GPIO_Init+0xcc>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <MX_GPIO_Init+0xcc>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MX_GPIO_Init+0xcc>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a26      	ldr	r2, [pc, #152]	; (8001398 <MX_GPIO_Init+0xcc>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <MX_GPIO_Init+0xcc>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_GPIO_Init+0xcc>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a20      	ldr	r2, [pc, #128]	; (8001398 <MX_GPIO_Init+0xcc>)
 8001316:	f043 0308 	orr.w	r3, r3, #8
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <MX_GPIO_Init+0xcc>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2120      	movs	r1, #32
 800132c:	481b      	ldr	r0, [pc, #108]	; (800139c <MX_GPIO_Init+0xd0>)
 800132e:	f000 fc70 	bl	8001c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001332:	2200      	movs	r2, #0
 8001334:	217f      	movs	r1, #127	; 0x7f
 8001336:	481a      	ldr	r0, [pc, #104]	; (80013a0 <MX_GPIO_Init+0xd4>)
 8001338:	f000 fc6b 	bl	8001c12 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800133c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001346:	2301      	movs	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4619      	mov	r1, r3
 8001350:	4814      	ldr	r0, [pc, #80]	; (80013a4 <MX_GPIO_Init+0xd8>)
 8001352:	f000 facd 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001356:	2320      	movs	r3, #32
 8001358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4619      	mov	r1, r3
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <MX_GPIO_Init+0xd0>)
 800136e:	f000 fabf 	bl	80018f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001372:	237f      	movs	r3, #127	; 0x7f
 8001374:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_GPIO_Init+0xd4>)
 800138a:	f000 fab1 	bl	80018f0 <HAL_GPIO_Init>

}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	40010800 	.word	0x40010800
 80013a0:	40010c00 	.word	0x40010c00
 80013a4:	40011000 	.word	0x40011000

080013a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	timerRun();
 80013b0:	f000 f8c6 	bl	8001540 <timerRun>
	getKeyInput();
 80013b4:	f7ff f8c2 	bl	800053c <getKeyInput>
	getKeyInput1();
 80013b8:	f7ff f90e 	bl	80005d8 <getKeyInput1>
	getKeyInput2();
 80013bc:	f7ff f95a 	bl	8000674 <getKeyInput2>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x8>
	...

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_MspInit+0x5c>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4a14      	ldr	r2, [pc, #80]	; (8001430 <HAL_MspInit+0x5c>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6193      	str	r3, [r2, #24]
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_MspInit+0x5c>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_MspInit+0x5c>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_MspInit+0x5c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	61d3      	str	r3, [r2, #28]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_MspInit+0x5c>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_MspInit+0x60>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_MspInit+0x60>)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000

08001438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001448:	d113      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	201c      	movs	r0, #28
 8001468:	f000 fa0b 	bl	8001882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800146c:	201c      	movs	r0, #28
 800146e:	f000 fa24 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c6:	f000 f8e9 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM2_IRQHandler+0x10>)
 80014d6:	f001 f839 	bl	800254c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000008c 	.word	0x2000008c

080014e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <setTimer>:

int timer_flag = 0;
int timer_flag1 = 0;
int timer_flag2 = 0;

void setTimer(int duration){
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	timer_counter = duration;
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <setTimer+0x20>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
	timer_flag = 0;
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <setTimer+0x24>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000074 	.word	0x20000074
 8001514:	20000080 	.word	0x20000080

08001518 <setTimer1>:
void setTimer1(int duration){
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	timer_counter1 = duration;
 8001520:	4a05      	ldr	r2, [pc, #20]	; (8001538 <setTimer1+0x20>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]
	timer_flag1 = 0;
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <setTimer1+0x24>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000078 	.word	0x20000078
 800153c:	20000084 	.word	0x20000084

08001540 <timerRun>:
void setTimer2(int duration){
	timer_counter2 = duration;
	timer_flag2 = 0;
}

void timerRun(){
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	if(timer_counter > 0) timer_counter--;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <timerRun+0x6c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	dd04      	ble.n	8001556 <timerRun+0x16>
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <timerRun+0x6c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <timerRun+0x6c>)
 8001554:	6013      	str	r3, [r2, #0]
	if(timer_counter <= 0) timer_flag = 1;
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <timerRun+0x6c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	dc02      	bgt.n	8001564 <timerRun+0x24>
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <timerRun+0x70>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]

	if(timer_counter1 > 0) timer_counter1--;
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <timerRun+0x74>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	dd04      	ble.n	8001576 <timerRun+0x36>
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <timerRun+0x74>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3b01      	subs	r3, #1
 8001572:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <timerRun+0x74>)
 8001574:	6013      	str	r3, [r2, #0]
	if(timer_counter1 <= 0) timer_flag1 = 1;
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <timerRun+0x74>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	dc02      	bgt.n	8001584 <timerRun+0x44>
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <timerRun+0x78>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

	if(timer_counter2 > 0) timer_counter2--;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <timerRun+0x7c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	dd04      	ble.n	8001596 <timerRun+0x56>
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <timerRun+0x7c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <timerRun+0x7c>)
 8001594:	6013      	str	r3, [r2, #0]
	if(timer_counter2 <= 0) timer_flag2 = 1;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <timerRun+0x7c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	dc02      	bgt.n	80015a4 <timerRun+0x64>
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <timerRun+0x80>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000074 	.word	0x20000074
 80015b0:	20000080 	.word	0x20000080
 80015b4:	20000078 	.word	0x20000078
 80015b8:	20000084 	.word	0x20000084
 80015bc:	2000007c 	.word	0x2000007c
 80015c0:	20000088 	.word	0x20000088

080015c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015c6:	490d      	ldr	r1, [pc, #52]	; (80015fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015cc:	e002      	b.n	80015d4 <LoopCopyDataInit>

080015ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d2:	3304      	adds	r3, #4

080015d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d8:	d3f9      	bcc.n	80015ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015dc:	4c0a      	ldr	r4, [pc, #40]	; (8001608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e0:	e001      	b.n	80015e6 <LoopFillZerobss>

080015e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e4:	3204      	adds	r2, #4

080015e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e8:	d3fb      	bcc.n	80015e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ea:	f7ff ff7b 	bl	80014e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f001 faf5 	bl	8002bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015f2:	f7ff fdc1 	bl	8001178 <main>
  bx lr
 80015f6:	4770      	bx	lr
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001600:	08002c74 	.word	0x08002c74
  ldr r2, =_sbss
 8001604:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001608:	200000d8 	.word	0x200000d8

0800160c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800160c:	e7fe      	b.n	800160c <ADC1_2_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_Init+0x28>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_Init+0x28>)
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f923 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	200f      	movs	r0, #15
 8001628:	f000 f808 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff fed2 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f93b 	bl	80018d6 <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f000 f903 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	; (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000034 	.word	0x20000034
 8001694:	2000003c 	.word	0x2000003c
 8001698:	20000038 	.word	0x20000038

0800169c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_IncTick+0x20>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	2000003c 	.word	0x2000003c
 80016bc:	200000d4 	.word	0x200000d4

080016c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <HAL_GetTick+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	200000d4 	.word	0x200000d4

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4906      	ldr	r1, [pc, #24]	; (800176c <__NVIC_EnableIRQ+0x34>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff90 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff2d 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff42 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff35 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b08b      	sub	sp, #44	; 0x2c
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001902:	e148      	b.n	8001b96 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001904:	2201      	movs	r2, #1
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8137 	bne.w	8001b90 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4aa3      	ldr	r2, [pc, #652]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d05e      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800192c:	4aa1      	ldr	r2, [pc, #644]	; (8001bb4 <HAL_GPIO_Init+0x2c4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d875      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001932:	4aa1      	ldr	r2, [pc, #644]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d058      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001938:	4a9f      	ldr	r2, [pc, #636]	; (8001bb8 <HAL_GPIO_Init+0x2c8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d86f      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800193e:	4a9f      	ldr	r2, [pc, #636]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d052      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001944:	4a9d      	ldr	r2, [pc, #628]	; (8001bbc <HAL_GPIO_Init+0x2cc>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d869      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800194a:	4a9d      	ldr	r2, [pc, #628]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d04c      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 8001950:	4a9b      	ldr	r2, [pc, #620]	; (8001bc0 <HAL_GPIO_Init+0x2d0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d863      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001956:	4a9b      	ldr	r2, [pc, #620]	; (8001bc4 <HAL_GPIO_Init+0x2d4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d046      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
 800195c:	4a99      	ldr	r2, [pc, #612]	; (8001bc4 <HAL_GPIO_Init+0x2d4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d85d      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 8001962:	2b12      	cmp	r3, #18
 8001964:	d82a      	bhi.n	80019bc <HAL_GPIO_Init+0xcc>
 8001966:	2b12      	cmp	r3, #18
 8001968:	d859      	bhi.n	8001a1e <HAL_GPIO_Init+0x12e>
 800196a:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <HAL_GPIO_Init+0x80>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	080019eb 	.word	0x080019eb
 8001974:	080019c5 	.word	0x080019c5
 8001978:	080019d7 	.word	0x080019d7
 800197c:	08001a19 	.word	0x08001a19
 8001980:	08001a1f 	.word	0x08001a1f
 8001984:	08001a1f 	.word	0x08001a1f
 8001988:	08001a1f 	.word	0x08001a1f
 800198c:	08001a1f 	.word	0x08001a1f
 8001990:	08001a1f 	.word	0x08001a1f
 8001994:	08001a1f 	.word	0x08001a1f
 8001998:	08001a1f 	.word	0x08001a1f
 800199c:	08001a1f 	.word	0x08001a1f
 80019a0:	08001a1f 	.word	0x08001a1f
 80019a4:	08001a1f 	.word	0x08001a1f
 80019a8:	08001a1f 	.word	0x08001a1f
 80019ac:	08001a1f 	.word	0x08001a1f
 80019b0:	08001a1f 	.word	0x08001a1f
 80019b4:	080019cd 	.word	0x080019cd
 80019b8:	080019e1 	.word	0x080019e1
 80019bc:	4a82      	ldr	r2, [pc, #520]	; (8001bc8 <HAL_GPIO_Init+0x2d8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019c2:	e02c      	b.n	8001a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e029      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	3304      	adds	r3, #4
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e024      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	3308      	adds	r3, #8
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e01f      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	330c      	adds	r3, #12
 80019e6:	623b      	str	r3, [r7, #32]
          break;
 80019e8:	e01a      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019f2:	2304      	movs	r3, #4
 80019f4:	623b      	str	r3, [r7, #32]
          break;
 80019f6:	e013      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d105      	bne.n	8001a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a00:	2308      	movs	r3, #8
 8001a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	611a      	str	r2, [r3, #16]
          break;
 8001a0a:	e009      	b.n	8001a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	615a      	str	r2, [r3, #20]
          break;
 8001a16:	e003      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
          break;
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x130>
          break;
 8001a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	; 0xff
 8001a24:	d801      	bhi.n	8001a2a <HAL_GPIO_Init+0x13a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_Init+0x13e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d802      	bhi.n	8001a3c <HAL_GPIO_Init+0x14c>
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	e002      	b.n	8001a42 <HAL_GPIO_Init+0x152>
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	3b08      	subs	r3, #8
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	210f      	movs	r1, #15
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	6a39      	ldr	r1, [r7, #32]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8090 	beq.w	8001b90 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a70:	4b56      	ldr	r3, [pc, #344]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a55      	ldr	r2, [pc, #340]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_GPIO_Init+0x2dc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a88:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <HAL_GPIO_Init+0x2e0>)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a49      	ldr	r2, [pc, #292]	; (8001bd4 <HAL_GPIO_Init+0x2e4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00d      	beq.n	8001ad0 <HAL_GPIO_Init+0x1e0>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <HAL_GPIO_Init+0x2e8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d007      	beq.n	8001acc <HAL_GPIO_Init+0x1dc>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <HAL_GPIO_Init+0x2ec>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_GPIO_Init+0x1d8>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e004      	b.n	8001ad2 <HAL_GPIO_Init+0x1e2>
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x1e2>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_GPIO_Init+0x1e2>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad4:	f002 0203 	and.w	r2, r2, #3
 8001ad8:	0092      	lsls	r2, r2, #2
 8001ada:	4093      	lsls	r3, r2
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae2:	493b      	ldr	r1, [pc, #236]	; (8001bd0 <HAL_GPIO_Init+0x2e0>)
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d006      	beq.n	8001b0a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4937      	ldr	r1, [pc, #220]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b0a:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	4933      	ldr	r1, [pc, #204]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b24:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	492d      	ldr	r1, [pc, #180]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b32:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4929      	ldr	r1, [pc, #164]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d006      	beq.n	8001b5a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	4923      	ldr	r1, [pc, #140]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b5a:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	491f      	ldr	r1, [pc, #124]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4919      	ldr	r1, [pc, #100]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60cb      	str	r3, [r1, #12]
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b82:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4915      	ldr	r1, [pc, #84]	; (8001be0 <HAL_GPIO_Init+0x2f0>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	3301      	adds	r3, #1
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f47f aeaf 	bne.w	8001904 <HAL_GPIO_Init+0x14>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	bf00      	nop
 8001baa:	372c      	adds	r7, #44	; 0x2c
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	10320000 	.word	0x10320000
 8001bb8:	10310000 	.word	0x10310000
 8001bbc:	10220000 	.word	0x10220000
 8001bc0:	10210000 	.word	0x10210000
 8001bc4:	10120000 	.word	0x10120000
 8001bc8:	10110000 	.word	0x10110000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40010800 	.word	0x40010800
 8001bd8:	40010c00 	.word	0x40010c00
 8001bdc:	40011000 	.word	0x40011000
 8001be0:	40010400 	.word	0x40010400

08001be4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	e001      	b.n	8001c06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	807b      	strh	r3, [r7, #2]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c22:	787b      	ldrb	r3, [r7, #1]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c28:	887a      	ldrh	r2, [r7, #2]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c2e:	e003      	b.n	8001c38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	041a      	lsls	r2, r3, #16
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	611a      	str	r2, [r3, #16]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e26c      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8087 	beq.w	8001d72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c64:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d00c      	beq.n	8001c8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c70:	4b8f      	ldr	r3, [pc, #572]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d112      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x5e>
 8001c7c:	4b8c      	ldr	r3, [pc, #560]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d10b      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8a:	4b89      	ldr	r3, [pc, #548]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d06c      	beq.n	8001d70 <HAL_RCC_OscConfig+0x12c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d168      	bne.n	8001d70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e246      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x76>
 8001cac:	4b80      	ldr	r3, [pc, #512]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a7f      	ldr	r2, [pc, #508]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	e02e      	b.n	8001d18 <HAL_RCC_OscConfig+0xd4>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x98>
 8001cc2:	4b7b      	ldr	r3, [pc, #492]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a7a      	ldr	r2, [pc, #488]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b78      	ldr	r3, [pc, #480]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a77      	ldr	r2, [pc, #476]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e01d      	b.n	8001d18 <HAL_RCC_OscConfig+0xd4>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0xbc>
 8001ce6:	4b72      	ldr	r3, [pc, #456]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a71      	ldr	r2, [pc, #452]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0xd4>
 8001d00:	4b6b      	ldr	r3, [pc, #428]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6a      	ldr	r2, [pc, #424]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a67      	ldr	r2, [pc, #412]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d013      	beq.n	8001d48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fcce 	bl	80016c0 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fcca 	bl	80016c0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e1fa      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0xe4>
 8001d46:	e014      	b.n	8001d72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fcba 	bl	80016c0 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff fcb6 	bl	80016c0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1e6      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x10c>
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d063      	beq.n	8001e46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7e:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d8a:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d11c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x18c>
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d116      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_RCC_OscConfig+0x176>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e1ba      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4939      	ldr	r1, [pc, #228]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	e03a      	b.n	8001e46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd8:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dde:	f7ff fc6f 	bl	80016c0 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff fc6b 	bl	80016c0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e19b      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4927      	ldr	r1, [pc, #156]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
 8001e18:	e015      	b.n	8001e46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <HAL_RCC_OscConfig+0x270>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fc4e 	bl	80016c0 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e28:	f7ff fc4a 	bl	80016c0 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e17a      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d03a      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d019      	beq.n	8001e8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7ff fc2e 	bl	80016c0 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff fc2a 	bl	80016c0 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e15a      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f000 faa6 	bl	80023d8 <RCC_Delay>
 8001e8c:	e01c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_RCC_OscConfig+0x274>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7ff fc14 	bl	80016c0 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9a:	e00f      	b.n	8001ebc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fc10 	bl	80016c0 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d908      	bls.n	8001ebc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e140      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	42420000 	.word	0x42420000
 8001eb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebc:	4b9e      	ldr	r3, [pc, #632]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e9      	bne.n	8001e9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a6 	beq.w	8002022 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4b97      	ldr	r3, [pc, #604]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10d      	bne.n	8001f02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4b94      	ldr	r3, [pc, #592]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4a93      	ldr	r2, [pc, #588]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	61d3      	str	r3, [r2, #28]
 8001ef2:	4b91      	ldr	r3, [pc, #580]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efe:	2301      	movs	r3, #1
 8001f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f02:	4b8e      	ldr	r3, [pc, #568]	; (800213c <HAL_RCC_OscConfig+0x4f8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d118      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0e:	4b8b      	ldr	r3, [pc, #556]	; (800213c <HAL_RCC_OscConfig+0x4f8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a8a      	ldr	r2, [pc, #552]	; (800213c <HAL_RCC_OscConfig+0x4f8>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fbd1 	bl	80016c0 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f22:	f7ff fbcd 	bl	80016c0 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b64      	cmp	r3, #100	; 0x64
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e0fd      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	4b81      	ldr	r3, [pc, #516]	; (800213c <HAL_RCC_OscConfig+0x4f8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x312>
 8001f48:	4b7b      	ldr	r3, [pc, #492]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4a7a      	ldr	r2, [pc, #488]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6213      	str	r3, [r2, #32]
 8001f54:	e02d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x36e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x334>
 8001f5e:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a75      	ldr	r2, [pc, #468]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a72      	ldr	r2, [pc, #456]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	e01c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x36e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_OscConfig+0x356>
 8001f80:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a6c      	ldr	r2, [pc, #432]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	4b6a      	ldr	r3, [pc, #424]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a69      	ldr	r2, [pc, #420]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	e00b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x36e>
 8001f9a:	4b67      	ldr	r3, [pc, #412]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a66      	ldr	r2, [pc, #408]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6213      	str	r3, [r2, #32]
 8001fa6:	4b64      	ldr	r3, [pc, #400]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a63      	ldr	r2, [pc, #396]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d015      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fb81 	bl	80016c0 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff fb7d 	bl	80016c0 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0ab      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	4b57      	ldr	r3, [pc, #348]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ee      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x37e>
 8001fe4:	e014      	b.n	8002010 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff fb6b 	bl	80016c0 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7ff fb67 	bl	80016c0 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e095      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002004:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1ee      	bne.n	8001fee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d105      	bne.n	8002022 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002016:	4b48      	ldr	r3, [pc, #288]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4a47      	ldr	r2, [pc, #284]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002020:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8081 	beq.w	800212e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202c:	4b42      	ldr	r3, [pc, #264]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b08      	cmp	r3, #8
 8002036:	d061      	beq.n	80020fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d146      	bne.n	80020ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b3f      	ldr	r3, [pc, #252]	; (8002140 <HAL_RCC_OscConfig+0x4fc>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7ff fb3b 	bl	80016c0 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff fb37 	bl	80016c0 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e067      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002060:	4b35      	ldr	r3, [pc, #212]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d108      	bne.n	8002088 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	492d      	ldr	r1, [pc, #180]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002088:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a19      	ldr	r1, [r3, #32]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	430b      	orrs	r3, r1
 800209a:	4927      	ldr	r1, [pc, #156]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_OscConfig+0x4fc>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff fb0b 	bl	80016c0 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ae:	f7ff fb07 	bl	80016c0 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e037      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x46a>
 80020cc:	e02f      	b.n	800212e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <HAL_RCC_OscConfig+0x4fc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff faf4 	bl	80016c0 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff faf0 	bl	80016c0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e020      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x498>
 80020fa:	e018      	b.n	800212e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d101      	bne.n	8002108 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e013      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	429a      	cmp	r2, r3
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
 8002140:	42420060 	.word	0x42420060

08002144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0d0      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d910      	bls.n	8002188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b67      	ldr	r3, [pc, #412]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 0207 	bic.w	r2, r3, #7
 800216e:	4965      	ldr	r1, [pc, #404]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b63      	ldr	r3, [pc, #396]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0b8      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d020      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a0:	4b59      	ldr	r3, [pc, #356]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a58      	ldr	r2, [pc, #352]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b8:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a52      	ldr	r2, [pc, #328]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	494d      	ldr	r1, [pc, #308]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d040      	beq.n	8002264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d115      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e07f      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002202:	4b41      	ldr	r3, [pc, #260]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e073      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e06b      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4936      	ldr	r1, [pc, #216]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002234:	f7ff fa44 	bl	80016c0 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7ff fa40 	bl	80016c0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e053      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d210      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 0207 	bic.w	r2, r3, #7
 800227a:	4922      	ldr	r1, [pc, #136]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e032      	b.n	80022fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4916      	ldr	r1, [pc, #88]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	490e      	ldr	r1, [pc, #56]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022d2:	f000 f821 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80022d6:	4602      	mov	r2, r0
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	490a      	ldr	r1, [pc, #40]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022e4:	5ccb      	ldrb	r3, [r1, r3]
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	4a09      	ldr	r2, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1cc>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1d0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f9a2 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40022000 	.word	0x40022000
 8002308:	40021000 	.word	0x40021000
 800230c:	08002c5c 	.word	0x08002c5c
 8002310:	20000034 	.word	0x20000034
 8002314:	20000038 	.word	0x20000038

08002318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002318:	b490      	push	{r4, r7}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800231e:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002320:	1d3c      	adds	r4, r7, #4
 8002322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002328:	f240 2301 	movw	r3, #513	; 0x201
 800232c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d002      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x40>
 8002352:	2b08      	cmp	r3, #8
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x46>
 8002356:	e02d      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235a:	623b      	str	r3, [r7, #32]
      break;
 800235c:	e02d      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	0c9b      	lsrs	r3, r3, #18
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800236a:	4413      	add	r3, r2
 800236c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002370:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	0c5b      	lsrs	r3, r3, #17
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800238a:	4413      	add	r3, r2
 800238c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002390:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002396:	fb02 f203 	mul.w	r2, r2, r3
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
 80023a2:	e004      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023a8:	fb02 f303 	mul.w	r3, r2, r3
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	623b      	str	r3, [r7, #32]
      break;
 80023b2:	e002      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b6:	623b      	str	r3, [r7, #32]
      break;
 80023b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ba:	6a3b      	ldr	r3, [r7, #32]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc90      	pop	{r4, r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	08002c4c 	.word	0x08002c4c
 80023cc:	40021000 	.word	0x40021000
 80023d0:	007a1200 	.word	0x007a1200
 80023d4:	003d0900 	.word	0x003d0900

080023d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <RCC_Delay+0x34>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <RCC_Delay+0x38>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0a5b      	lsrs	r3, r3, #9
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f4:	bf00      	nop
  }
  while (Delay --);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	60fa      	str	r2, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f9      	bne.n	80023f4 <RCC_Delay+0x1c>
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000034 	.word	0x20000034
 8002410:	10624dd3 	.word	0x10624dd3

08002414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e041      	b.n	80024aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe fffc 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3304      	adds	r3, #4
 8002450:	4619      	mov	r1, r3
 8002452:	4610      	mov	r0, r2
 8002454:	f000 fa6a 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d001      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e035      	b.n	8002538 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a16      	ldr	r2, [pc, #88]	; (8002544 <HAL_TIM_Base_Start_IT+0x90>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_TIM_Base_Start_IT+0x4e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d004      	beq.n	8002502 <HAL_TIM_Base_Start_IT+0x4e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <HAL_TIM_Base_Start_IT+0x94>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d111      	bne.n	8002526 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b06      	cmp	r3, #6
 8002512:	d010      	beq.n	8002536 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002524:	e007      	b.n	8002536 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40000400 	.word	0x40000400

0800254c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d122      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b02      	cmp	r3, #2
 800256e:	d11b      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0202 	mvn.w	r2, #2
 8002578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f9b1 	bl	80028f6 <HAL_TIM_IC_CaptureCallback>
 8002594:	e005      	b.n	80025a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9a4 	bl	80028e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f9b3 	bl	8002908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d122      	bne.n	80025fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d11b      	bne.n	80025fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0204 	mvn.w	r2, #4
 80025cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2202      	movs	r2, #2
 80025d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f987 	bl	80028f6 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f97a 	bl	80028e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f989 	bl	8002908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b08      	cmp	r3, #8
 8002608:	d122      	bne.n	8002650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d11b      	bne.n	8002650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0208 	mvn.w	r2, #8
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2204      	movs	r2, #4
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f95d 	bl	80028f6 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f950 	bl	80028e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f95f 	bl	8002908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b10      	cmp	r3, #16
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b10      	cmp	r3, #16
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0210 	mvn.w	r2, #16
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2208      	movs	r2, #8
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f933 	bl	80028f6 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f926 	bl	80028e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f935 	bl	8002908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d10e      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d107      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0201 	mvn.w	r2, #1
 80026c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fe fe6c 	bl	80013a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	2b80      	cmp	r3, #128	; 0x80
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e8:	2b80      	cmp	r3, #128	; 0x80
 80026ea:	d107      	bne.n	80026fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fa67 	bl	8002bca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	d10e      	bne.n	8002728 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d107      	bne.n	8002728 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f8f9 	bl	800291a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b20      	cmp	r3, #32
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b20      	cmp	r3, #32
 8002742:	d107      	bne.n	8002754 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0220 	mvn.w	r2, #32
 800274c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fa32 	bl	8002bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_TIM_ConfigClockSource+0x18>
 8002770:	2302      	movs	r3, #2
 8002772:	e0b3      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x180>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800279a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ac:	d03e      	beq.n	800282c <HAL_TIM_ConfigClockSource+0xd0>
 80027ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b2:	f200 8087 	bhi.w	80028c4 <HAL_TIM_ConfigClockSource+0x168>
 80027b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ba:	f000 8085 	beq.w	80028c8 <HAL_TIM_ConfigClockSource+0x16c>
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	d87f      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x168>
 80027c4:	2b70      	cmp	r3, #112	; 0x70
 80027c6:	d01a      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0xa2>
 80027c8:	2b70      	cmp	r3, #112	; 0x70
 80027ca:	d87b      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x168>
 80027cc:	2b60      	cmp	r3, #96	; 0x60
 80027ce:	d050      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0x116>
 80027d0:	2b60      	cmp	r3, #96	; 0x60
 80027d2:	d877      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x168>
 80027d4:	2b50      	cmp	r3, #80	; 0x50
 80027d6:	d03c      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0xf6>
 80027d8:	2b50      	cmp	r3, #80	; 0x50
 80027da:	d873      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x168>
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	d058      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0x136>
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d86f      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x168>
 80027e4:	2b30      	cmp	r3, #48	; 0x30
 80027e6:	d064      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x156>
 80027e8:	2b30      	cmp	r3, #48	; 0x30
 80027ea:	d86b      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x168>
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d060      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x156>
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d867      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x168>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d05c      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x156>
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d05a      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027fc:	e062      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f000 f95c 	bl	8002aca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002820:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	609a      	str	r2, [r3, #8]
      break;
 800282a:	e04e      	b.n	80028ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6899      	ldr	r1, [r3, #8]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f000 f945 	bl	8002aca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800284e:	609a      	str	r2, [r3, #8]
      break;
 8002850:	e03b      	b.n	80028ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	f000 f8bc 	bl	80029dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2150      	movs	r1, #80	; 0x50
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f913 	bl	8002a96 <TIM_ITRx_SetConfig>
      break;
 8002870:	e02b      	b.n	80028ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6859      	ldr	r1, [r3, #4]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	461a      	mov	r2, r3
 8002880:	f000 f8da 	bl	8002a38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2160      	movs	r1, #96	; 0x60
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f903 	bl	8002a96 <TIM_ITRx_SetConfig>
      break;
 8002890:	e01b      	b.n	80028ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	461a      	mov	r2, r3
 80028a0:	f000 f89c 	bl	80029dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2140      	movs	r1, #64	; 0x40
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f8f3 	bl	8002a96 <TIM_ITRx_SetConfig>
      break;
 80028b0:	e00b      	b.n	80028ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f000 f8ea 	bl	8002a96 <TIM_ITRx_SetConfig>
        break;
 80028c2:	e002      	b.n	80028ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028c4:	bf00      	nop
 80028c6:	e000      	b.n	80028ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a25      	ldr	r2, [pc, #148]	; (80029d4 <TIM_Base_SetConfig+0xa8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d007      	beq.n	8002954 <TIM_Base_SetConfig+0x28>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d003      	beq.n	8002954 <TIM_Base_SetConfig+0x28>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a22      	ldr	r2, [pc, #136]	; (80029d8 <TIM_Base_SetConfig+0xac>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d108      	bne.n	8002966 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <TIM_Base_SetConfig+0xa8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d007      	beq.n	800297e <TIM_Base_SetConfig+0x52>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002974:	d003      	beq.n	800297e <TIM_Base_SetConfig+0x52>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <TIM_Base_SetConfig+0xac>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d108      	bne.n	8002990 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a07      	ldr	r2, [pc, #28]	; (80029d4 <TIM_Base_SetConfig+0xa8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d103      	bne.n	80029c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	615a      	str	r2, [r3, #20]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400

080029dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f023 0201 	bic.w	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f023 030a 	bic.w	r3, r3, #10
 8002a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f023 0210 	bic.w	r2, r3, #16
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	031b      	lsls	r3, r3, #12
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	621a      	str	r2, [r3, #32]
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f043 0307 	orr.w	r3, r3, #7
 8002ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	609a      	str	r2, [r3, #8]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b087      	sub	sp, #28
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	021a      	lsls	r2, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	609a      	str	r2, [r3, #8]
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e041      	b.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d009      	beq.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6c:	d004      	beq.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d10c      	bne.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40000400 	.word	0x40000400

08002bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <__libc_init_array>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	2600      	movs	r6, #0
 8002be0:	4d0c      	ldr	r5, [pc, #48]	; (8002c14 <__libc_init_array+0x38>)
 8002be2:	4c0d      	ldr	r4, [pc, #52]	; (8002c18 <__libc_init_array+0x3c>)
 8002be4:	1b64      	subs	r4, r4, r5
 8002be6:	10a4      	asrs	r4, r4, #2
 8002be8:	42a6      	cmp	r6, r4
 8002bea:	d109      	bne.n	8002c00 <__libc_init_array+0x24>
 8002bec:	f000 f822 	bl	8002c34 <_init>
 8002bf0:	2600      	movs	r6, #0
 8002bf2:	4d0a      	ldr	r5, [pc, #40]	; (8002c1c <__libc_init_array+0x40>)
 8002bf4:	4c0a      	ldr	r4, [pc, #40]	; (8002c20 <__libc_init_array+0x44>)
 8002bf6:	1b64      	subs	r4, r4, r5
 8002bf8:	10a4      	asrs	r4, r4, #2
 8002bfa:	42a6      	cmp	r6, r4
 8002bfc:	d105      	bne.n	8002c0a <__libc_init_array+0x2e>
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c04:	4798      	blx	r3
 8002c06:	3601      	adds	r6, #1
 8002c08:	e7ee      	b.n	8002be8 <__libc_init_array+0xc>
 8002c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0e:	4798      	blx	r3
 8002c10:	3601      	adds	r6, #1
 8002c12:	e7f2      	b.n	8002bfa <__libc_init_array+0x1e>
 8002c14:	08002c6c 	.word	0x08002c6c
 8002c18:	08002c6c 	.word	0x08002c6c
 8002c1c:	08002c6c 	.word	0x08002c6c
 8002c20:	08002c70 	.word	0x08002c70

08002c24 <memset>:
 8002c24:	4603      	mov	r3, r0
 8002c26:	4402      	add	r2, r0
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d100      	bne.n	8002c2e <memset+0xa>
 8002c2c:	4770      	bx	lr
 8002c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c32:	e7f9      	b.n	8002c28 <memset+0x4>

08002c34 <_init>:
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	bf00      	nop
 8002c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3a:	bc08      	pop	{r3}
 8002c3c:	469e      	mov	lr, r3
 8002c3e:	4770      	bx	lr

08002c40 <_fini>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr
